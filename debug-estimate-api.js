const { PrismaClient } = require('@prisma/client')

async function debugEstimateAPI() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–º–µ—Ç—ã...')
    
    // –ë–µ—Ä–µ–º —Å–º–µ—Ç—É —Å –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏ –Ω–æ –±–µ–∑ —Ä–∞–±–æ—Ç
    const estimate = await prisma.estimate.findFirst({
      where: { 
        type: 'rooms',
        rooms: { some: {} }
      },
      include: {
        rooms: {
          include: {
            works: {
              include: {
                workItem: true
              }
            },
            materials: true
          }
        }
      }
    })
    
    if (!estimate) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–º–µ—Ç')
      return
    }
    
    console.log('üìã –°–º–µ—Ç–∞:', estimate.title)
    console.log('üè† –ü–æ–º–µ—â–µ–Ω–∏–π:', estimate.rooms.length)
    
    const room = estimate.rooms[0]
    console.log('üìä –ü–µ—Ä–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ:', room.name)
    console.log('   –†–∞–±–æ—Ç:', room.works.length)
    console.log('   –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', room.materials.length)
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∫ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const updateBody = {
      title: estimate.title,
      type: estimate.type,
      totalWorksPrice: 0,
      totalMaterialsPrice: 0,
      totalPrice: 0,
      rooms: estimate.rooms.map(room => ({
        id: room.id,
        name: room.name,
        totalWorksPrice: 0,
        totalMaterialsPrice: 0,
        totalPrice: 0,
        worksBlock: {
          id: `works_${room.id}`,
          title: `–†–∞–±–æ—Ç—ã - ${room.name}`,
          blocks: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤
          totalPrice: 0
        },
        materialsBlock: {
          id: `materials_${room.id}`,
          title: `–ú–∞—Ç–µ—Ä–∏–∞–ª—ã - ${room.name}`,
          items: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
          totalPrice: 0
        }
      }))
    }
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...')
    console.log('   –ü–æ–º–µ—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateBody.rooms.length)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
    const updatedEstimate = await prisma.estimate.update({
      where: { id: estimate.id },
      data: {
        title: updateBody.title,
        totalWorksPrice: updateBody.totalWorksPrice,
        totalMaterialsPrice: updateBody.totalMaterialsPrice,
        totalPrice: updateBody.totalPrice,
        updatedAt: new Date()
      }
    })
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏–π
    for (const roomData of updateBody.rooms) {
      console.log('üè† –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–º–µ—â–µ–Ω–∏–µ:', roomData.name)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–º–µ—â–µ–Ω–∏–µ
      await prisma.estimateRoom.update({
        where: { id: roomData.id },
        data: {
          name: roomData.name,
          totalWorksPrice: roomData.totalWorksPrice,
          totalMaterialsPrice: roomData.totalMaterialsPrice,
          totalPrice: roomData.totalPrice
        }
      })
      console.log('   ‚úÖ –ü–æ–º–µ—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–±–æ—Ç—ã
      await prisma.estimateWork.deleteMany({
        where: { roomId: roomData.id }
      })
      console.log('   üóëÔ∏è –°—Ç–∞—Ä—ã–µ —Ä–∞–±–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã')
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
      const works = (roomData.worksBlock?.blocks || []).flatMap(block =>
        (block.items || []).map(item => ({
          roomId: roomData.id,
          quantity: item.quantity || 0,
          price: item.unitPrice || 0,
          totalPrice: item.totalPrice || 0,
          description: item.description || '',
          workItemId: item.workId || item.workItemId,
          blockTitle: block.title
        }))
      ).filter(work => work.workItemId)
      
      console.log('   üìù –†–∞–±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', works.length)
      
      if (works.length > 0) {
        await prisma.estimateWork.createMany({
          data: works
        })
        console.log('   ‚úÖ –†–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã')
      } else {
        console.log('   ‚úÖ –†–∞–±–æ—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)')
      }
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      await prisma.estimateMaterial.deleteMany({
        where: { roomId: roomData.id }
      })
      console.log('   üóëÔ∏è –°—Ç–∞—Ä—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã')
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
      const materials = (roomData.materialsBlock?.items || []).map(item => ({
        roomId: roomData.id,
        name: item.name,
        unit: item.unit,
        quantity: item.quantity || 0,
        price: item.unitPrice || 0,
        totalPrice: item.totalPrice || 0,
        description: item.description || ''
      }))
      
      console.log('   üìù –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', materials.length)
      
      if (materials.length > 0) {
        await prisma.estimateMaterial.createMany({
          data: materials
        })
        console.log('   ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã')
      } else {
        console.log('   ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)')
      }
    }
    
    console.log('üéâ –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏:', error.message)
    console.error('üíª –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error)
    
    if (error.code) {
      console.error('üîç –ö–æ–¥ –æ—à–∏–±–∫–∏ Prisma:', error.code)
    }
  } finally {
    await prisma.$disconnect()
  }
}

debugEstimateAPI()
