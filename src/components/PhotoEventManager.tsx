'use client';

import { useState, useEffect, useRef } from 'react';
import { X, ZoomIn, Download, ChevronLeft, ChevronRight, Edit, Trash2 } from 'lucide-react';

interface Photo {
  id: string;
  fileName: string;
  filePath: string;
  fileSize: number;
  mimeType: string;
  description?: string;
  createdAt: string;
}

interface PhotoEvent {
  id: string;
  title: string;
  description?: string;
  createdAt: string;
  photos: Photo[];
}

interface PhotoEventManagerProps {
  clientId: string;
  canUpload?: boolean;
}

export default function PhotoEventManager({ clientId, canUpload = true }: PhotoEventManagerProps) {
  const [events, setEvents] = useState<PhotoEvent[]>([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [draggedOver, setDraggedOver] = useState<string | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [newEventTitle, setNewEventTitle] = useState('');
  const [newEventDescription, setNewEventDescription] = useState('');
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Modal state for photo preview
  const [selectedPhoto, setSelectedPhoto] = useState<Photo | null>(null);
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
  const [allPhotos, setAllPhotos] = useState<Photo[]>([]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞
  const [editingEvent, setEditingEvent] = useState<PhotoEvent | null>(null);
  const [editTitle, setEditTitle] = useState('');
  const [editDescription, setEditDescription] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const [deletingEvent, setDeletingEvent] = useState<PhotoEvent | null>(null);
  const [deletingPhoto, setDeletingPhoto] = useState<Photo | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  const loadEvents = async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ API –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
      const apiEndpoint = canUpload 
        ? `/api/photo-events?clientId=${clientId}` 
        : '/api/client/photos';
      
      console.log('üì° PhotoEventManager: Loading events from:', apiEndpoint);
      console.log('üîß PhotoEventManager: canUpload =', canUpload);
      console.log('üÜî PhotoEventManager: clientId =', clientId);
      
      const response = await fetch(apiEndpoint);
      console.log('üì° PhotoEventManager: Response status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ PhotoEventManager: Received data:', data);
        setEvents(data.photoBlocks || []);
      } else {
        const errorText = await response.text();
        console.error('‚ùå PhotoEventManager: API error:', response.status, errorText);
      }
    } catch (error) {
      console.error('‚ùå PhotoEventManager: Network error:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadEvents();
  }, [clientId]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  const createEvent = async () => {
    if (!newEventTitle.trim()) return;

    try {
      const response = await fetch('/api/photo-events', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          clientId,
          title: newEventTitle,
          description: newEventDescription
        })
      });

      if (response.ok) {
        const data = await response.json();
        setEvents(prev => [data.photoBlock, ...prev]);
        setNewEventTitle('');
        setNewEventDescription('');
        setShowCreateForm(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  const uploadFiles = async (eventId: string, files: FileList) => {
    setUploading(true);
    const results = [];

    for (const file of Array.from(files)) {
      if (!file.type.startsWith('image/')) {
        console.warn('–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª (–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):', file.name);
        continue;
      }

      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:', file.name, '—Ä–∞–∑–º–µ—Ä:', Math.round(file.size / 1024), 'KB');

      try {
        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch(`/api/photo-events/${eventId}/upload`, {
          method: 'POST',
          body: formData
        });

        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ:', data.photo?.fileName);
          results.push(data.photo);
        } else {
          const errorData = await response.text();
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status, errorData);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
          if (response.status === 413) {
            alert(`–§–∞–π–ª "${file.name}" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 100MB.`);
          } else if (response.status === 500) {
            try {
              const errorJson = JSON.parse(errorData);
              alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ "${file.name}": ${errorJson.error}`);
            } catch {
              alert(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ "${file.name}"`);
            }
          } else {
            alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ "${file.name}": ${response.statusText}`);
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', file.name, error);
        alert(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ "${file.name}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.`);
      }
    }

    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', results.length, '–∏–∑', files.length);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    await loadEvents();
    setUploading(false);
  };

  // Drag & Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleDragOver = (e: React.DragEvent, eventId: string) => {
    e.preventDefault();
    setDraggedOver(eventId);
  };

  const handleDragLeave = () => {
    setDraggedOver(null);
  };

  const handleDrop = (e: React.DragEvent, eventId: string) => {
    e.preventDefault();
    setDraggedOver(null);
    
    if (!canUpload) return;
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      uploadFiles(eventId, files);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
  const handleFileSelect = (eventId: string) => {
    if (fileInputRef.current) {
      fileInputRef.current.onchange = (e) => {
        const target = e.target as HTMLInputElement;
        if (target.files && target.files.length > 0) {
          uploadFiles(eventId, target.files);
        }
      };
      fileInputRef.current.click();
    }
  };

  // Open photo modal
  const openPhotoModal = (photo: Photo, eventPhotos: Photo[]) => {
    setSelectedPhoto(photo);
    setAllPhotos(eventPhotos);
    setCurrentPhotoIndex(eventPhotos.findIndex(p => p.id === photo.id));
  };

  // Close photo modal
  const closePhotoModal = () => {
    setSelectedPhoto(null);
    setAllPhotos([]);
    setCurrentPhotoIndex(0);
  };

  // Navigate photos in modal
  const navigatePhoto = (direction: 'prev' | 'next') => {
    if (allPhotos.length === 0) return;
    
    let newIndex;
    if (direction === 'prev') {
      newIndex = currentPhotoIndex > 0 ? currentPhotoIndex - 1 : allPhotos.length - 1;
    } else {
      newIndex = currentPhotoIndex < allPhotos.length - 1 ? currentPhotoIndex + 1 : 0;
    }
    
    setCurrentPhotoIndex(newIndex);
    setSelectedPhoto(allPhotos[newIndex]);
  };

  // Handle keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!selectedPhoto) return;
      
      if (e.key === 'Escape') {
        closePhotoModal();
      } else if (e.key === 'ArrowLeft') {
        navigatePhoto('prev');
      } else if (e.key === 'ArrowRight') {
        navigatePhoto('next');
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [selectedPhoto, currentPhotoIndex, allPhotos]);

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
  const startEdit = (event: PhotoEvent) => {
    setEditingEvent(event);
    setEditTitle(event.title);
    setEditDescription(event.description || '');
  };

  const saveEdit = async () => {
    if (!editingEvent || !editTitle.trim()) {
      alert('–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    try {
      const response = await fetch(`/api/photo-events/${editingEvent.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: editTitle.trim(),
          description: editDescription.trim() || null
        }),
      });

      if (response.ok) {
        setEditingEvent(null);
        await loadEvents();
      } else {
        alert(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞: ${response.statusText}`);
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∞');
    }
  };

  const cancelEdit = () => {
    setEditingEvent(null);
    setEditTitle('');
    setEditDescription('');
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
  const startDeleteEvent = (event: PhotoEvent) => {
    setDeletingEvent(event);
  };

  const confirmDeleteEvent = async () => {
    if (!deletingEvent) return;

    try {
      const response = await fetch(`/api/photo-events/${deletingEvent.id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        setDeletingEvent(null);
        await loadEvents();
      } else {
        alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞: ${response.statusText}`);
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∞');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ
  const startDeletePhoto = (photo: Photo) => {
    setDeletingPhoto(photo);
  };

  const confirmDeletePhoto = async () => {
    if (!deletingPhoto) return;

    try {
      const response = await fetch(`/api/photos/${deletingPhoto.id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        setDeletingPhoto(null);
        await loadEvents();
      } else {
        alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: ${response.statusText}`);
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è */}
      {canUpload && (
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold">–°–æ–±—ã—Ç–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h2>
          <button
            onClick={() => setShowCreateForm(true)}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
          </button>
        </div>
      )}

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è */}
      {showCreateForm && (
        <div className="bg-gray-50 p-4 rounded-lg border">
          <h3 className="font-medium mb-3">–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</h3>
          <div className="space-y-3">
            <input
              type="text"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
              value={newEventTitle}
              onChange={(e) => setNewEventTitle(e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <textarea
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={newEventDescription}
              onChange={(e) => setNewEventDescription(e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={3}
            />
            <div className="flex gap-2">
              <button
                onClick={createEvent}
                disabled={!newEventTitle.trim()}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:bg-gray-300 transition-colors"
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
              <button
                onClick={() => {
                  setShowCreateForm(false);
                  setNewEventTitle('');
                  setNewEventDescription('');
                }}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π */}
      {events.length === 0 ? (
        <div className="text-center py-12 text-gray-500">
          <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</p>
          {canUpload && (
            <p className="text-sm mt-2">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</p>
          )}
        </div>
      ) : (
        <div className="grid gap-6">
          {events.map((event) => (
            <div
              key={event.id}
              className={`border rounded-lg p-4 transition-all ${
                draggedOver === event.id 
                  ? 'border-blue-500 bg-blue-50' 
                  : 'border-gray-200 hover:border-gray-300'
              }`}
              onDragOver={(e) => handleDragOver(e, event.id)}
              onDragLeave={handleDragLeave}
              onDrop={(e) => handleDrop(e, event.id)}
            >
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è */}
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h3 className="text-lg font-medium">{event.title}</h3>
                  {event.description && (
                    <p className="text-gray-600 text-sm mt-1">{event.description}</p>
                  )}
                  <p className="text-gray-400 text-xs mt-1">
                    {new Date(event.createdAt).toLocaleDateString('ru-RU')}
                  </p>
                </div>
                
                {canUpload && (
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => handleFileSelect(event.id)}
                      disabled={uploading}
                      className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 disabled:bg-gray-300 transition-colors"
                    >
                      –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                    </button>
                    <button
                      onClick={() => startEdit(event)}
                      className="p-2 text-gray-400 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫"
                    >
                      <Edit className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => startDeleteEvent(event)}
                      className="p-2 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                      title="–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                )}
              </div>

              {/* –°–µ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
              {event.photos.length > 0 ? (
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3">
                  {event.photos.map((photo) => (
                    <div 
                      key={photo.id} 
                      className="relative group"
                    >
                      <div 
                        className="cursor-pointer"
                        onClick={() => openPhotoModal(photo, event.photos)}
                      >
                        <img
                          src={photo.filePath}
                          alt={photo.fileName}
                          className="w-full h-24 object-cover rounded-lg border transition-transform group-hover:scale-105"
                        />
                        <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all rounded-lg flex items-center justify-center">
                          <ZoomIn className="text-white opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6" />
                        </div>
                      </div>
                      {canUpload && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            startDeletePhoto(photo);
                          }}
                          className="absolute top-1 right-1 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-600"
                          title="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 border-2 border-dashed border-gray-300 rounded-lg">
                  <svg className="w-12 h-12 text-gray-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <p className="text-gray-500">
                    {canUpload 
                      ? '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"'
                      : '–í —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
                    }
                  </p>
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {/* Photo Preview Modal */}
      {selectedPhoto && (
        <div className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center p-4">
          <div className="relative max-w-7xl max-h-full w-full h-full flex items-center justify-center">
            {/* Close button */}
            <button
              onClick={closePhotoModal}
              className="absolute top-4 right-4 z-10 p-2 bg-black bg-opacity-50 text-white rounded-full hover:bg-opacity-70 transition-colors"
            >
              <X className="h-6 w-6" />
            </button>

            {/* Navigation buttons */}
            {allPhotos.length > 1 && (
              <>
                <button
                  onClick={() => navigatePhoto('prev')}
                  className="absolute left-4 top-1/2 -translate-y-1/2 z-10 p-3 bg-black bg-opacity-50 text-white rounded-full hover:bg-opacity-70 transition-colors"
                >
                  <ChevronLeft className="h-6 w-6" />
                </button>
                <button
                  onClick={() => navigatePhoto('next')}
                  className="absolute right-4 top-1/2 -translate-y-1/2 z-10 p-3 bg-black bg-opacity-50 text-white rounded-full hover:bg-opacity-70 transition-colors"
                >
                  <ChevronRight className="h-6 w-6" />
                </button>
              </>
            )}

            {/* Photo counter */}
            {allPhotos.length > 1 && (
              <div className="absolute top-4 left-1/2 -translate-x-1/2 z-10 px-3 py-1 bg-black bg-opacity-50 text-white rounded-full text-sm">
                {currentPhotoIndex + 1} –∏–∑ {allPhotos.length}
              </div>
            )}

            {/* Download button */}
            <a
              href={selectedPhoto.filePath}
              download={selectedPhoto.fileName}
              className="absolute bottom-4 right-4 z-10 p-3 bg-black bg-opacity-50 text-white rounded-full hover:bg-opacity-70 transition-colors"
              title="–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ"
            >
              <Download className="h-5 w-5" />
            </a>

            {/* Photo info */}
            <div className="absolute bottom-4 left-4 z-10 px-4 py-2 bg-black bg-opacity-50 text-white rounded-lg max-w-md">
              <p className="font-medium text-sm">{selectedPhoto.fileName}</p>
              <p className="text-xs text-gray-300 mt-1">
                {new Date(selectedPhoto.createdAt).toLocaleDateString('ru-RU', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </p>
              {selectedPhoto.description && (
                <p className="text-xs text-gray-300 mt-1">{selectedPhoto.description}</p>
              )}
            </div>

            {/* Main photo */}
            <img
              src={selectedPhoto.filePath}
              alt={selectedPhoto.fileName}
              className="max-w-full max-h-full object-contain rounded-lg shadow-2xl"
              onClick={(e) => e.stopPropagation()}
            />
          </div>

          {/* Click outside to close */}
          <div 
            className="absolute inset-0 -z-10" 
            onClick={closePhotoModal}
          />
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ */}
      {editingEvent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4">
            <h3 className="font-medium mb-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h3>
            <div className="space-y-4">
              <input
                type="text"
                value={editTitle}
                onChange={(e) => setEditTitle(e.target.value)}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <textarea
                value={editDescription}
                onChange={(e) => setEditDescription(e.target.value)}
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                rows={3}
              />
              <div className="flex gap-2">
                <button
                  onClick={saveEdit}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button
                  onClick={cancelEdit}
                  className="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400 transition-colors"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      {deletingEvent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4">
            <h3 className="font-medium mb-4">–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π?</h3>
            <p className="text-gray-600 mb-4">
              –ë–ª–æ–∫ "{deletingEvent.title}" –∏ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –Ω–µ–º –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.
            </p>
            <div className="flex gap-2">
              <button
                onClick={confirmDeleteEvent}
                className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
              <button
                onClick={() => setDeletingEvent(null)}
                className="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400 transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {deletingPhoto && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4">
            <h3 className="font-medium mb-4">–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?</h3>
            <p className="text-gray-600 mb-4">
              –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è "{deletingPhoto.fileName}" –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.
            </p>
            <div className="flex gap-2">
              <button
                onClick={confirmDeletePhoto}
                className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
              <button
                onClick={() => setDeletingPhoto(null)}
                className="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400 transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ */}
      <input
        ref={fileInputRef}
        type="file"
        multiple
        accept="image/*"
        className="hidden"
      />

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {uploading && (
        <div className="fixed bottom-4 right-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg">
          <div className="flex items-center gap-2">
            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
            –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...
          </div>
        </div>
      )}
    </div>
  );
} 