import { NextRequest, NextResponse } from 'next/server'
import jwt from 'jsonwebtoken'
import { prisma } from '@/lib/database'
import { cookies } from 'next/headers'

// GET - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
export async function GET(request: NextRequest) {
  console.log('=== CLIENT PHOTOS API START ===');
  try {
    const cookieStore = cookies()
    const clientToken = cookieStore.get('client-token')?.value

    console.log('üîë Client token exists:', !!clientToken);

    if (!clientToken) {
      console.log('‚ùå No client token found');
      return NextResponse.json(
        { error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      )
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞
    const decoded = jwt.verify(clientToken, process.env.JWT_SECRET!) as any
    const clientId = decoded.clientId

    console.log('üÜî Client ID from token:', clientId);

    if (!clientId) {
      console.log('‚ùå No clientId in token');
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      )
    }

    console.log('üì∏ Loading photo blocks for client:', clientId);

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const photoBlocks = await prisma.photoBlock.findMany({
      where: {
        clientId
      },
      include: {
        photos: {
          orderBy: { createdAt: 'asc' }
        }
      },
      orderBy: { createdAt: 'desc' }
    })

    console.log('‚úÖ Found photo blocks:', photoBlocks.length);
    console.log('üìä Photo blocks data:', photoBlocks.map(block => ({
      id: block.id,
      title: block.title,
      photosCount: block.photos.length
    })));

    console.log('=== CLIENT PHOTOS API END (SUCCESS) ===');
    return NextResponse.json({ photoBlocks })
  } catch (error) {
    console.error('‚ùå Client photos API error:', error)
    console.log('=== CLIENT PHOTOS API END (ERROR) ===');
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
} 