import { NextRequest, NextResponse } from 'next/server';
import { put } from '@vercel/blob';
import { prisma } from '@/lib/database';
import { checkAuth } from '@/lib/auth';

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π fetch
async function uploadToVercelBlobDirect(fileName: string, buffer: Buffer, contentType: string): Promise<string> {
  const token = process.env.BLOB_READ_WRITE_TOKEN;
  if (!token) {
    throw new Error('BLOB_READ_WRITE_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }

  // –°–æ–∑–¥–∞–µ–º form data
  const formData = new FormData();
  formData.append('file', new Blob([buffer], { type: contentType }), fileName);

  console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π fetch –∫ Vercel Blob API...');

  const response = await fetch('https://blob.vercel-storage.com', {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'x-content-type': contentType,
    },
    body: formData,
    signal: AbortSignal.timeout(30000) // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Vercel Blob API error: ${response.status} ${errorText}`);
  }

  const result = await response.json();
  return result.url;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
async function retryWithBackoff<T>(
  fn: () => Promise<T>,
  maxRetries: number = 2,
  baseDelay: number = 3000
): Promise<T> {
  let lastError: Error;
  
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      lastError = error as Error;
      
      if (attempt === maxRetries) {
        throw lastError;
      }
      
      const delay = baseDelay * Math.pow(2, attempt);
      console.log(`üîÑ Retry attempt ${attempt + 1}/${maxRetries + 1} after ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  throw lastError!;
}

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const user = await checkAuth(request);
    if (!user) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const eventId = params.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    const photoBlock = await prisma.photoBlock.findFirst({
      where: {
        id: eventId,
        client: {
          ...(user.role !== 'ADMIN' ? { createdBy: user.id } : {})
        }
      },
      include: {
        client: true
      }
    });

    if (!photoBlock) {
      return NextResponse.json({ error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' }, { status: 404 });
    }

    const formData = await request.formData();
    const file = formData.get('file') as File;
    const description = formData.get('description') as string;

    if (!file) {
      return NextResponse.json({ error: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      return NextResponse.json({ error: '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 100MB)
    if (file.size > 100 * 1024 * 1024) {
      return NextResponse.json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 100MB)' }, { status: 400 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileExtension = file.name.split('.').pop();
    const uniqueFileName = `photos/events/${eventId}/${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExtension}`;

    console.log('üöÄ Uploading photo to Vercel Blob:', uniqueFileName);
    console.log('üîë Token available:', !!process.env.BLOB_READ_WRITE_TOKEN);
    console.log('üìÅ File size:', Math.round(file.size / 1024), 'KB');
    console.log('üé® File type:', file.type);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Buffer –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const buffer = Buffer.from(await file.arrayBuffer());

    let fileUrl: string;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SDK
      console.log('üì¶ –ü—Ä–æ–±—É–µ–º Vercel Blob SDK...');
      const blob = await retryWithBackoff(async () => {
        return await put(uniqueFileName, buffer, {
          access: 'public',
          addRandomSuffix: false,
          contentType: file.type,
          token: process.env.BLOB_READ_WRITE_TOKEN,
          cacheControlMaxAge: 31536000
        });
      }, 1, 2000); // –¢–æ–ª—å–∫–æ 1 –ø–æ–ø—ã—Ç–∫–∞

      fileUrl = blob.url;
      console.log('‚úÖ SDK —É—Å–ø–µ—à–Ω–æ:', fileUrl);

    } catch (sdkError) {
      console.log('‚ùå SDK –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π API...');
      console.error('SDK error:', sdkError);

      // Fallback –Ω–∞ –ø—Ä—è–º–æ–π fetch
      fileUrl = await retryWithBackoff(async () => {
        return await uploadToVercelBlobDirect(uniqueFileName, buffer, file.type);
      }, 2, 3000); // 2 –ø–æ–ø—ã—Ç–∫–∏ —Å –ø—Ä—è–º—ã–º API

      console.log('‚úÖ –ü—Ä—è–º–æ–π API —É—Å–ø–µ—à–Ω–æ:', fileUrl);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const photo = await prisma.photo.create({
      data: {
        fileName: file.name,
        filePath: fileUrl,
        fileSize: file.size,
        mimeType: file.type,
        description: description || null,
        blockId: eventId
      }
    });

    console.log('‚úÖ Photo saved to database:', photo.id);

    return NextResponse.json({ 
      success: true, 
      photo,
      message: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Vercel Blob'
    });

  } catch (error) {
    console.error('‚ùå Upload error:', error);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    if (error instanceof Error) {
      if (error.message.includes('CONNECT_TIMEOUT') || error.message.includes('timeout')) {
        errorMessage = '–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Vercel Blob. –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–µ—Ç–∏ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.';
      } else if (error.message.includes('EPIPE')) {
        errorMessage = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.';
      } else if (error.message.includes('fetch failed')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Vercel Blob. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ VPN.';
      } else if (error.message.includes('401') || error.message.includes('403')) {
        errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Vercel Blob. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.';
      } else {
        errorMessage = error.message;
      }
    }
    
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Vercel Blob: ' + errorMessage 
    }, { status: 500 });
  }
} 