import { NextRequest, NextResponse } from 'next/server';
import { put } from '@vercel/blob';
import { prisma } from '@/lib/database';
import { checkAuth } from '@/lib/auth';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
async function retryWithBackoff<T>(
  fn: () => Promise<T>,
  maxRetries: number = 3,
  baseDelay: number = 1000
): Promise<T> {
  let lastError: Error;
  
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      lastError = error as Error;
      
      if (attempt === maxRetries) {
        throw lastError;
      }
      
      const delay = baseDelay * Math.pow(2, attempt);
      console.log(`üîÑ Retry attempt ${attempt + 1}/${maxRetries + 1} after ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  throw lastError!;
}

export async function POST(request: NextRequest) {
  console.log('=== PHOTOS UPLOAD API START (LEGACY) ===');
  console.log('üì∏ Photos upload API called (legacy endpoint)');
  console.log('üîç Request method:', request.method);
  console.log('üîç Request URL:', request.url);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('üîê Checking authentication...');
    const session = checkAuth(request);
    if (!session) {
      console.log('‚ùå No valid session found');
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
      }

    console.log('üë§ User session:', { id: session.id, role: session.role });

    console.log('üìã Parsing form data...');
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const clientId = formData.get('clientId') as string;
    const blockId = formData.get('blockId') as string;
    const description = formData.get('description') as string || '';

    console.log('üìù Form data parsed:', {
      hasFile: !!file,
      fileName: file?.name,
      clientId,
      blockId,
      description
    });

    if (!file) {
      console.log('‚ùå No file provided');
      return NextResponse.json({ error: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 });
    }

    if (!clientId) {
      console.log('‚ùå No clientId provided');
      return NextResponse.json({ error: 'ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 });
    }

    if (!blockId) {
      console.log('‚ùå No blockId provided');
      return NextResponse.json({ error: 'ID –±–ª–æ–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 });
    }

    console.log('üìÑ File info:', {
      name: file.name,
      size: file.size,
      type: file.type,
      clientId,
      blockId
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
    const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      console.log('‚ùå Invalid file type:', file.type);
      return NextResponse.json({ 
        error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, WebP)' 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (100 –ú–ë)
    const maxSize = 100 * 1024 * 1024; // 100MB
    if (file.size > maxSize) {
      return NextResponse.json({
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ú–ë'
      }, { status: 400 });
    }

    console.log('üîç Checking client access...');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∏–µ–Ω—Ç—É
    const client = await prisma.client.findFirst({
      where: {
        id: clientId,
        isActive: true
      }
    });

    if (!client) {
      console.log('‚ùå Client not found:', clientId);
      return NextResponse.json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    console.log('‚úÖ Client found:', { id: client.id, name: client.name });

    // –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (session.role === 'MANAGER' && client.createdBy !== session.id) {
      console.log('‚ùå Access denied for manager:', { managerId: session.id, clientCreatedBy: client.createdBy });
      return NextResponse.json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
    }

    console.log('üîç Checking/creating photo block...');
    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    let photoBlock = await prisma.photoBlock.findFirst({
      where: {
        id: blockId,
        clientId: clientId
      }
    });

    if (!photoBlock) {
      // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      photoBlock = await prisma.photoBlock.create({
        data: {
          id: blockId,
          title: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
          clientId: clientId
        }
      });
      console.log('üìÅ Created new photo block:', photoBlock.id);
    } else {
      console.log('üìÅ Using existing photo block:', photoBlock.id);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è Vercel Blob
    const fileExtension = file.name.split('.').pop();
    const uniqueFileName = `photos/${clientId}/${blockId}/${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExtension}`;

    console.log('üöÄ Uploading to Vercel Blob (SDK with File object - legacy):', uniqueFileName);
    console.log('üîë Blob token available:', !!process.env.BLOB_READ_WRITE_TOKEN);
    console.log('üîë Token length:', process.env.BLOB_READ_WRITE_TOKEN?.length);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Vercel Blob —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è File –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é
    const blob = await retryWithBackoff(async () => {
      console.log('üöÄ Attempting SDK upload with File object (legacy)...');
      return await put(uniqueFileName, file, {
      access: 'public',
        addRandomSuffix: false,
        token: process.env.BLOB_READ_WRITE_TOKEN
    });
    }, 3, 2000);

    console.log('‚úÖ Blob uploaded via SDK (legacy):', blob.url);

    console.log('üíæ Saving to database...');
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const photo = await prisma.photo.create({
      data: {
        fileName: file.name,
        filePath: blob.url,
        fileSize: file.size,
        mimeType: file.type,
        description: description || null,
        blockId: blockId
      }
    });

    console.log('üíæ Photo saved to database:', photo.id);

    console.log('üì§ Returning JSON response');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
    const response = {
      photo,
      url: blob.url,
      message: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Vercel Blob (legacy endpoint)'
    };
    
    console.log('‚úÖ Success response:', response);
    console.log('=== PHOTOS UPLOAD API END (SUCCESS - LEGACY) ===');
    
    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå Upload error (legacy):', error);
    console.error('‚ùå Error stack:', (error as Error).stack);
    console.error('‚ùå Error cause:', (error as any).cause);
    console.log('=== PHOTOS UPLOAD API END (ERROR - LEGACY) ===');
    
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ' + (error as Error).message },
      { status: 500 }
    );
  }
} 