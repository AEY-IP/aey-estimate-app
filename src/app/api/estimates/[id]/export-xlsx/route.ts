import { NextRequest, NextResponse } from 'next/server'
import { checkAuth } from '@/lib/auth'
import { prisma } from '@/lib/database'
import ExcelJS from 'exceljs'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
    // –ü–†–ò–ß–ò–ù–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫—É–∫–∏ —Å–µ—Å—Å–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    // TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫—É–∫–∏ –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    // NOTE: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ
    
    /*
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã)
    const authResult = await checkAuth(request)
    
    if (!authResult.authenticated || !authResult.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    if (authResult.user.role !== 'ADMIN' && authResult.user.role !== 'MANAGER') {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }
    */

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ—Ç—É —Å –∫–µ—à–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∞
    const estimate = await prisma.estimate.findUnique({
      where: { id: params.id },
      include: {
        exportCache: true,
        rooms: {
          include: {
            works: {
              include: {
                workItem: true
              }
            },
            materials: true
          }
        },
        coefficients: true
      }
    })

    if (!estimate) {
      return NextResponse.json({ error: 'Estimate not found' }, { status: 404 })
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É ExcelJS
    const workbook = new ExcelJS.Workbook()
    const worksheet = workbook.addWorksheet('–°–º–µ—Ç–∞')

    // –§–∏—Ä–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
    const colors = {
      primary: '000000',      // –ß–µ—Ä–Ω—ã–π (–æ—Å–Ω–æ–≤–Ω–æ–π)
      secondary: '374151',    // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
      accent: 'EC4899',       // –†–æ–∑–æ–≤—ã–π (–∞–∫—Ü–µ–Ω—Ç)
      success: 'EC4899',      // –†–æ–∑–æ–≤—ã–π –¥–ª—è –∏—Ç–æ–≥–æ–≤
      warning: '6B7280',      // –°–µ—Ä—ã–π –¥–ª—è –±–ª–æ–∫–æ–≤
      gray: '9CA3AF',         // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
      lightGray: 'F9FAFB'     // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    }

    let currentRow = 1

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–º–µ—Ç—ã
    const addTitle = () => {
      const titleRow = worksheet.getRow(currentRow)
      titleRow.getCell(1).value = estimate.title
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
      worksheet.mergeCells(currentRow, 1, currentRow, 6)
      
      // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      titleRow.getCell(1).style = {
        font: { bold: true, size: 16, color: { argb: 'FFFFFFFF' } },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + colors.primary } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: {
          top: { style: 'medium', color: { argb: 'FF' + colors.primary } },
          bottom: { style: 'medium', color: { argb: 'FF' + colors.primary } },
          left: { style: 'medium', color: { argb: 'FF' + colors.primary } },
          right: { style: 'medium', color: { argb: 'FF' + colors.primary } }
        }
      }
      titleRow.height = 30
      currentRow += 2 // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    const addTableHeaders = () => {
      const headerRow = worksheet.getRow(currentRow)
      const headers = ['‚Ññ –ø/–ø', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç/–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', '–ï–¥. –∏–∑–º.', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞ –∑–∞ –µ–¥.', '–°—Ç–æ–∏–º–æ—Å—Ç—å']
      
      headers.forEach((header, index) => {
        const cell = headerRow.getCell(index + 1)
        cell.value = header
        cell.style = {
          font: { bold: true, size: 11, color: { argb: 'FFFFFFFF' } },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + colors.secondary } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: {
            top: { style: 'thin', color: { argb: 'FF' + colors.gray } },
            bottom: { style: 'thin', color: { argb: 'FF' + colors.gray } },
            left: { style: 'thin', color: { argb: 'FF' + colors.gray } },
            right: { style: 'thin', color: { argb: 'FF' + colors.gray } }
          }
        }
      })
      headerRow.height = 25
      currentRow++
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏
    const addSectionHeader = (title: string) => {
      const sectionRow = worksheet.getRow(currentRow)
      sectionRow.getCell(1).value = title
      
      worksheet.mergeCells(currentRow, 1, currentRow, 6)
      
      sectionRow.getCell(1).style = {
        font: { bold: true, size: 12, color: { argb: 'FFFFFFFF' } },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + colors.warning } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: {
          top: { style: 'thin', color: { argb: 'FF' + colors.warning } },
          bottom: { style: 'thin', color: { argb: 'FF' + colors.warning } },
          left: { style: 'thin', color: { argb: 'FF' + colors.warning } },
          right: { style: 'thin', color: { argb: 'FF' + colors.warning } }
        }
      }
      sectionRow.height = 20
      currentRow++
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–ª–æ–∫–∞
    const addBlockHeader = (title: string) => {
      const blockRow = worksheet.getRow(currentRow)
      blockRow.getCell(2).value = title
      
      // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
      for (let col = 1; col <= 6; col++) {
        const cell = blockRow.getCell(col)
        cell.style = {
          font: { bold: true, size: 11, color: { argb: 'FF000000' } },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + colors.lightGray } },
          alignment: { horizontal: col === 2 ? 'left' : 'center', vertical: 'middle' },
          border: {
            top: { style: 'thin', color: { argb: 'FF' + colors.gray } },
            bottom: { style: 'thin', color: { argb: 'FF' + colors.gray } },
            left: { style: 'thin', color: { argb: 'FF' + colors.gray } },
            right: { style: 'thin', color: { argb: 'FF' + colors.gray } }
          }
        }
      }
      currentRow++
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    const addWorkItem = (rowNum: number, workName: string, unit: string, quantity: number, unitPrice: number, totalPrice: number) => {
      const workRow = worksheet.getRow(currentRow)
      const values = [rowNum, workName, unit, quantity, unitPrice, totalPrice]
      
      values.forEach((value, index) => {
        const cell = workRow.getCell(index + 1)
        cell.value = value
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏
        cell.style = {
          font: { size: 10 },
          alignment: { 
            horizontal: index === 1 ? 'left' : 'center', 
            vertical: 'middle' 
          },
          border: {
            top: { style: 'thin', color: { argb: 'FF' + colors.gray } },
            bottom: { style: 'thin', color: { argb: 'FF' + colors.gray } },
            left: { style: 'thin', color: { argb: 'FF' + colors.gray } },
            right: { style: 'thin', color: { argb: 'FF' + colors.gray } }
          }
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        if ((index === 4 || index === 5) && typeof value === 'number') {
          cell.numFmt = '#,##0.00"‚ÇΩ"'
        }

        // –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
        if (currentRow % 2 === 0) {
          cell.style.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + colors.lightGray } }
        }
      })
      currentRow++
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ç–æ–≥–∞
    const addSubtotal = (title: string, amount: number, isTotal: boolean = false) => {
      const subtotalRow = worksheet.getRow(currentRow)
      subtotalRow.getCell(2).value = title
      subtotalRow.getCell(6).value = amount
      
      const bgColor = isTotal ? colors.accent : colors.accent
      
      for (let col = 1; col <= 6; col++) {
        const cell = subtotalRow.getCell(col)
        cell.style = {
          font: { bold: true, size: isTotal ? 12 : 11, color: { argb: 'FFFFFFFF' } },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + bgColor } },
          alignment: { horizontal: col === 2 ? 'left' : 'center', vertical: 'middle' },
          border: {
            top: { style: 'medium', color: { argb: 'FF' + bgColor } },
            bottom: { style: 'medium', color: { argb: 'FF' + bgColor } },
            left: { style: 'medium', color: { argb: 'FF' + bgColor } },
            right: { style: 'medium', color: { argb: 'FF' + bgColor } }
          }
        }
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∏—Ç–æ–≥–µ
      subtotalRow.getCell(6).numFmt = '#,##0.00"‚ÇΩ"'
      subtotalRow.height = isTotal ? 25 : 20
      currentRow++
      if (!isTotal) currentRow++ // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å–∞–±—Ç–æ—Ç–∞–ª–∞
    }

    let workRowNumber = 1

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ –ø–æ–º–µ—â–µ–Ω–∏–π
    let allWorks: any[] = []
    let allMaterials: any[] = []

    if (estimate.exportCache) {
      console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è Excel')
      try {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
        const worksData = JSON.parse(estimate.exportCache.worksData)
        const materialsData = JSON.parse(estimate.exportCache.materialsData)
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–µ—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Excel
        if (Array.isArray(worksData)) {
          worksData.forEach((block: any) => {
            if (block.items && Array.isArray(block.items)) {
              block.items.forEach((item: any) => {
                allWorks.push({
                  ...item,
                  blockTitle: block.title,
                  workItem: { name: item.name, unit: item.unit },
                  quantity: item.quantity,
                  price: item.unitPrice,
                  totalPrice: item.totalPrice
                })
              })
            }
          })
        }
        
        if (Array.isArray(materialsData)) {
          materialsData.forEach((item: any) => {
            allMaterials.push({
              name: item.name,
              unit: item.unit,
              quantity: item.quantity,
              price: item.unitPrice,
              totalPrice: item.totalPrice
            })
          })
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–µ—à–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error)
        // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
        allWorks = []
        allMaterials = []
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–º–µ—â–µ–Ω–∏–π (fallback)
    if (allWorks.length === 0 && allMaterials.length === 0 && estimate.rooms && estimate.rooms.length > 0) {
      console.log('üìä Fallback: —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–º–µ—â–µ–Ω–∏–π')
      estimate.rooms.forEach((room: any) => {
        if (room.works && room.works.length > 0) {
          room.works.forEach((work: any) => {
            allWorks.push({
              ...work,
              roomContext: room.name
            })
          })
        }
        
        if (room.materials && room.materials.length > 0) {
          room.materials.forEach((material: any) => {
            allMaterials.push({
              ...material,
              roomContext: room.name
            })
          })
        }
      })
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç
    const processWorkItems = (items: any[], groupByBlock: boolean = true) => {
      if (!groupByBlock) {
        // –ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        items.forEach((item: any) => {
          const workName = item.workItem?.name || item.manualWorkName || item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
          const unit = item.workItem?.unit || item.manualWorkUnit || item.unit || '—à—Ç'
          const quantity = item.quantity || 0
          const unitPrice = item.price || 0
          const totalPrice = item.totalPrice || (quantity * unitPrice)

          addWorkItem(workRowNumber++, workName, unit, quantity, unitPrice, totalPrice)
        })
        return
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º
      const blockGroups: { [key: string]: any[] } = {}
      
      items.forEach((item: any) => {
        const blockTitle = item.blockTitle || '–ë–µ–∑ –±–ª–æ–∫–∞'
        if (!blockGroups[blockTitle]) {
          blockGroups[blockTitle] = []
        }
        blockGroups[blockTitle].push(item)
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫
      Object.entries(blockGroups).forEach(([blockTitle, blockItems]) => {
        addBlockHeader(blockTitle)
        
        let blockTotal = 0
        
        blockItems.forEach((item: any) => {
          const workName = item.workItem?.name || item.manualWorkName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
          const unit = item.workItem?.unit || item.manualWorkUnit || '—à—Ç'
          const quantity = item.quantity || 0
          const unitPrice = item.price || 0
          const totalPrice = item.totalPrice || (quantity * unitPrice)
          
          blockTotal += totalPrice
          addWorkItem(workRowNumber++, workName, unit, quantity, unitPrice, totalPrice)
        })

        addSubtotal(`–ò—Ç–æ–≥–æ –ø–æ –±–ª–æ–∫—É: ${blockTitle}`, blockTotal)
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    addTitle()
    addTableHeaders()

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã –≤ —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    if (allWorks.length > 0) {
      addSectionHeader('–†–ê–ë–û–¢–´')
      processWorkItems(allWorks, true)
      
      // –û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ —Ä–∞–±–æ—Ç–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –µ—Å–ª–∏ –µ—Å—Ç—å)
      const totalWorksPrice = estimate.exportCache 
        ? estimate.exportCache.totalWorksPrice 
        : allWorks.reduce((sum: number, work: any) => sum + (work.totalPrice || 0), 0)
      addSubtotal('–û–ë–©–ò–ô –ò–¢–û–ì –ü–û –†–ê–ë–û–¢–ê–ú', totalWorksPrice)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    if (allMaterials.length > 0) {
      addSectionHeader('–ú–ê–¢–ï–†–ò–ê–õ–´')
      processWorkItems(allMaterials, false)
      
      // –û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –µ—Å–ª–∏ –µ—Å—Ç—å)
      const totalMaterialsPrice = estimate.exportCache 
        ? estimate.exportCache.totalMaterialsPrice 
        : allMaterials.reduce((sum: number, material: any) => sum + (material.totalPrice || 0), 0)
      addSubtotal('–û–ë–©–ò–ô –ò–¢–û–ì –ü–û –ú–ê–¢–ï–†–ò–ê–õ–ê–ú', totalMaterialsPrice)
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if (allWorks.length === 0 && allMaterials.length === 0) {
      const emptyRow = worksheet.getRow(currentRow)
      emptyRow.getCell(2).value = '–î–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å–º–µ—Ç–∞ –ø—É—Å—Ç–∞—è'
      currentRow++
    }

    // –û–±—â–∏–π –∏—Ç–æ–≥ —Å–º–µ—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –µ—Å–ª–∏ –µ—Å—Ç—å)
    const grandTotal = estimate.exportCache 
      ? estimate.exportCache.grandTotal 
      : estimate.totalPrice || 0
    addSubtotal('–û–ë–©–ò–ô –ò–¢–û–ì –°–ú–ï–¢–´', grandTotal, true)

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns = [
      { width: 8 },   // ‚Ññ –ø/–ø
      { width: 50 },  // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
      { width: 10 },  // –ï–¥. –∏–∑–º.
      { width: 12 },  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      { width: 15 },  // –¶–µ–Ω–∞ –∑–∞ –µ–¥.
      { width: 15 }   // –°—Ç–æ–∏–º–æ—Å—Ç—å
    ]

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
    const excelBuffer = await workbook.xlsx.writeBuffer()

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const safeTitle = estimate.title
      .replace(/[–∞-—è—ë]/gi, '') // –£–±–∏—Ä–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
      .replace(/[^a-zA-Z0-9\s]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ª–∞—Ç–∏–Ω–∏—Ü—ã, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
      .replace(/\s+/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
      .substring(0, 30) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    const filename = `estimate_${safeTitle || 'unnamed'}_${estimate.id.substring(0, 8)}.xlsx`

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
    return new NextResponse(excelBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename="${filename}"`,
      },
    })

  } catch (error) {
    console.error('Export error:', error)
    return NextResponse.json(
      { error: 'Failed to export estimate' },
      { status: 500 }
    )
  }
}
