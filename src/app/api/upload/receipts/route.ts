import { NextRequest, NextResponse } from 'next/server';
import { put } from '@vercel/blob';
import { prisma } from '@/lib/database';
import { checkAuth } from '@/lib/auth';

export async function POST(request: NextRequest) {
  console.log('üßæ Receipts upload API called');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const session = checkAuth(request);
    if (!session) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    console.log('üë§ User session:', { id: session.id, role: session.role });

    const formData = await request.formData();
    const file = formData.get('file') as File;
    const clientId = formData.get('clientId') as string;
    const blockId = formData.get('blockId') as string;
    const description = formData.get('description') as string || '';

    if (!file) {
      return NextResponse.json({ error: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 });
    }

    if (!clientId) {
      return NextResponse.json({ error: 'ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 });
    }

    if (!blockId) {
      return NextResponse.json({ error: 'ID –±–ª–æ–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 });
    }

    console.log('üìÑ File info:', {
      name: file.name,
      size: file.size,
      type: file.type,
      clientId,
      blockId
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
    const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp', 'application/pdf'];
    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json({ 
        error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, WebP) –∏ PDF —Ñ–∞–π–ª—ã' 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (100 –ú–ë)
    const maxSize = 100 * 1024 * 1024; // 100MB
    if (file.size > maxSize) {
      return NextResponse.json({
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ú–ë'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∏–µ–Ω—Ç—É
    const client = await prisma.client.findFirst({
      where: {
        id: clientId,
        isActive: true
      }
    });

    if (!client) {
      return NextResponse.json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (session.role === 'MANAGER' && client.createdBy !== session.id) {
      return NextResponse.json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —á–µ–∫–æ–≤
    let receiptBlock = await prisma.receiptBlock.findFirst({
      where: {
        id: blockId,
        clientId: clientId
      }
    });

    if (!receiptBlock) {
      // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      receiptBlock = await prisma.receiptBlock.create({
        data: {
          id: blockId,
          title: '–ß–µ–∫–∏',
          clientId: clientId
        }
      });
      console.log('üìÅ Created new receipt block:', receiptBlock.id);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è Vercel Blob
    const fileExtension = file.name.split('.').pop();
    const uniqueFileName = `receipts/${clientId}/${blockId}/${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExtension}`;

    console.log('üöÄ Uploading to Vercel Blob:', uniqueFileName);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Vercel Blob
    const blob = await put(uniqueFileName, file, {
      access: 'public',
    });

    console.log('‚úÖ Blob uploaded:', blob.url);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const receipt = await prisma.receipt.create({
      data: {
        fileName: file.name,
        filePath: blob.url,
        fileSize: file.size,
        mimeType: file.type,
        description: description || null,
        blockId: blockId
      }
    });

    console.log('üíæ Receipt saved to database:', receipt.id);

    return NextResponse.json({
      receipt,
      url: blob.url,
      message: '–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Vercel Blob'
    });

  } catch (error) {
    console.error('‚ùå Upload error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') },
      { status: 500 }
    );
  }
} 