generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  username         String            @unique
  passwordHash     String
  role             String
  name             String
  phone            String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdActs      Act[]
  createdClients   Client[]
  deletedEstimates DeletedEstimate[]
  createdEstimates Estimate[]
  scheduleProjects ScheduleProject[]

  @@map("users")
}

model Client {
  id               String                @id @default(cuid())
  name             String
  phone            String?
  email            String?
  address          String?
  contractNumber   String?
  notes            String?
  isActive         Boolean               @default(true)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  createdBy        String
  contractDate     String?
  acts             Act[]
  clientUser       ClientUser?
  creator          User                  @relation(fields: [createdBy], references: [id])
  documents        Document[]
  documentBlocks   DocumentBlock[]
  estimates        Estimate[]
  photoBlocks      PhotoBlock[]
  projectNews      ProjectNews[]
  scheduleItems    ProjectScheduleItem[]
  receiptBlocks    ReceiptBlock[]
  scheduleProjects ScheduleProject[]

  @@map("clients")
}

model ClientUser {
  id            String   @id @default(cuid())
  username      String   @unique
  passwordHash  String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  clientId      String   @unique
  plainPassword String?
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_users")
}

model Document {
  id          String         @id @default(cuid())
  name        String
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  clientId    String
  blockId     String?        // Связь с блоком (необязательная для обратной совместимости)
  isVisible   Boolean        @default(true)
  sortOrder   Int            @default(0)
  tags        String?
  uploadedBy  String?
  category    String         @default("document")
  client      Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  block       DocumentBlock? @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model ProjectNews {
  id           String   @id @default(cuid())
  title        String
  content      String
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clientId     String
  type         String   @default("other")
  showToClient Boolean  @default(true)
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("project_news")
}

model ProjectScheduleItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  progress    Int      @default(0)
  status      String   @default("not_started")
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("project_schedule_items")
}

model PhotoBlock {
  id          String    @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clientId    String
  createdBy   String?
  eventDate   DateTime?
  isVisible   Boolean   @default(true)
  sortOrder   Int       @default(0)
  tags        String[]  @default([])
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photos      Photo[]

  @@map("photo_blocks")
}

model Photo {
  id          String     @id @default(cuid())
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  description String?
  createdAt   DateTime   @default(now())
  blockId     String
  isVisible   Boolean    @default(true)
  sortOrder   Int        @default(0)
  tags        String[]   @default([])
  uploadedBy  String?
  block       PhotoBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model ReceiptBlock {
  id          String    @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clientId    String
  createdBy   String?
  eventDate   DateTime?
  isVisible   Boolean   @default(true)
  sortOrder   Int       @default(0)
  tags        String[]  @default([])
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  receipts    Receipt[]

  @@map("receipt_blocks")
}

model DocumentBlock {
  id          String     @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  clientId    String
  createdBy   String?
  eventDate   DateTime?
  isVisible   Boolean    @default(true)
  sortOrder   Int        @default(0)
  tags        String[]   @default([])
  client      Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  documents   Document[]

  @@map("document_blocks")
}

model Receipt {
  id          String       @id @default(cuid())
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  description String?
  createdAt   DateTime     @default(now())
  blockId     String
  isVisible   Boolean      @default(true)
  sortOrder   Int          @default(0)
  tags        String[]     @default([])
  uploadedBy  String?
  block       ReceiptBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@map("receipts")
}

model WorkItem {
  id          String         @id @default(cuid())
  name        String
  unit        String
  price       Float
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  blockId     String
  parameterId String?
  actWorks    ActWork[]
  works       EstimateWork[]
  block       WorkBlock      @relation(fields: [blockId], references: [id])
  parameter   RoomParameter? @relation(fields: [parameterId], references: [id])

  @@map("work_items")
}

model WorkBlock {
  id          String     @id @default(cuid())
  title       String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  items       WorkItem[]

  @@map("work_blocks")
}

model Work {
  id          String   @id @default(cuid())
  name        String
  unit        String
  basePrice   Float
  category    String
  description String?
  parameterId String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("works")
}

model RoomParameter {
  id                 String                       @id @default(cuid())
  name               String
  unit               String
  description        String?
  isActive           Boolean                      @default(true)
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  actParameterValues ActRoomParameterValue[]
  parameterValues    EstimateRoomParameterValue[]
  workItems          WorkItem[]

  @@map("room_parameters")
}

model Coefficient {
  id          String   @id @default(cuid())
  name        String
  value       Float
  description String?
  isActive    Boolean  @default(true)
  category    String   @default("custom")
  createdAt   DateTime @default(now())
  type        String   @default("normal")
  updatedAt   DateTime @updatedAt

  @@map("coefficients")
}

model Estimate {
  id                    String                       @id @default(cuid())
  title                 String
  type                  String
  category              String
  totalWorksPrice       Float                        @default(0)
  totalMaterialsPrice   Float                        @default(0)
  totalPrice            Float                        @default(0)
  notes                 String?
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  clientId              String
  createdBy             String
  coefficientSettings   String?
  coefficientsData      String?
  manualPrices          String?
  materialsBlock        String?
  showToClient          Boolean                      @default(false)
  summaryMaterialsBlock String?
  summaryWorksBlock     String?
  worksBlock            String?
  isAct                 Boolean                      @default(false)
  coefficients          EstimateCoefficient[]
  exportCache           EstimateExport?
  roomParameterValues   EstimateRoomParameterValue[]
  rooms                 EstimateRoom[]
  client                Client                       @relation(fields: [clientId], references: [id])
  creator               User                         @relation(fields: [createdBy], references: [id])

  @@map("estimates")
}

model EstimateRoom {
  id                  String                       @id @default(cuid())
  name                String
  totalWorksPrice     Float                        @default(0)
  totalMaterialsPrice Float                        @default(0)
  totalPrice          Float                        @default(0)
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  estimateId          String
  sortOrder           Int                          @default(0)
  materials           EstimateMaterial[]
  roomParameterValues EstimateRoomParameterValue[]
  estimate            Estimate                     @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  works               EstimateWork[]

  @@map("estimate_rooms")
}

model EstimateWork {
  id             String       @id @default(cuid())
  quantity       Float
  price          Float
  totalPrice     Float
  description    String?
  roomId         String
  workItemId     String?
  blockTitle     String?
  manualWorkName String?
  manualWorkUnit String?
  room           EstimateRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  workItem       WorkItem?    @relation(fields: [workItemId], references: [id])

  @@map("estimate_works")
}

model EstimateMaterial {
  id          String       @id @default(cuid())
  name        String
  unit        String
  quantity    Float
  price       Float
  totalPrice  Float
  description String?
  roomId      String
  room        EstimateRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("estimate_materials")
}

model EstimateCoefficient {
  id          String   @id @default(cuid())
  name        String
  value       Float
  description String?
  estimateId  String
  estimate    Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@map("estimate_coefficients")
}

model EstimateRoomParameterValue {
  id          String        @id @default(cuid())
  parameterId String
  value       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  estimateId  String?
  roomId      String?
  estimate    Estimate?     @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  parameter   RoomParameter @relation(fields: [parameterId], references: [id])
  room        EstimateRoom? @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("estimate_room_parameter_values")
}

model DeletedEstimate {
  id                  String   @id @default(cuid())
  originalId          String
  title               String
  type                String
  category            String
  totalWorksPrice     Float
  totalMaterialsPrice Float
  totalPrice          Float
  notes               String?
  coefficientsData    String?
  coefficientSettings String?
  manualPrices        String?
  estimateData        String
  deletedAt           DateTime @default(now())
  deletedBy           String
  clientId            String
  originalCreatedBy   String
  originalCreatedAt   DateTime
  originalUpdatedAt   DateTime
  deletedUser         User     @relation(fields: [deletedBy], references: [id])

  @@map("deleted_estimates")
}

model EstimateExport {
  id                  String   @id @default(cuid())
  estimateId          String   @unique
  worksData           String
  materialsData       String
  totalWorksPrice     Float
  totalMaterialsPrice Float
  grandTotal          Float
  coefficientsInfo    String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  estimate            Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@map("estimate_exports")
}

model ScheduleProject {
  id           String         @id @default(cuid())
  clientId     String
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  status       String         @default("active")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    String
  showToClient Boolean        @default(false)
  client       Client         @relation(fields: [clientId], references: [id])
  creator      User           @relation(fields: [createdBy], references: [id])
  tasks        ScheduleTask[]

  @@map("schedule_projects")
}

model ScheduleTask {
  id           String          @id @default(cuid())
  projectId    String
  parentId     String?
  title        String
  description  String?
  level        Int             @default(0)
  orderIndex   Int             @default(0)
  plannedStart DateTime
  plannedEnd   DateTime
  actualStart  DateTime?
  actualEnd    DateTime?
  progress     Float           @default(0)
  status       String          @default("waiting")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  parent       ScheduleTask?   @relation("TaskHierarchy", fields: [parentId], references: [id])
  children     ScheduleTask[]  @relation("TaskHierarchy")
  project      ScheduleProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("schedule_tasks")
}

model Act {
  id                    String                  @id @default(cuid())
  title                 String
  type                  String
  category              String
  totalWorksPrice       Float                   @default(0)
  totalMaterialsPrice   Float                   @default(0)
  totalPrice            Float                   @default(0)
  notes                 String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  clientId              String
  createdBy             String
  coefficientSettings   String?
  coefficientsData      String?
  manualPrices          String?
  materialsBlock        String?
  summaryMaterialsBlock String?
  summaryWorksBlock     String?
  worksBlock            String?
  showToClient          Boolean                 @default(false)
  coefficients          ActCoefficient[]
  exportCache           ActExport?
  roomParameterValues   ActRoomParameterValue[]
  rooms                 ActRoom[]
  client                Client                  @relation(fields: [clientId], references: [id])
  creator               User                    @relation(fields: [createdBy], references: [id])

  @@map("acts")
}

model ActRoom {
  id                  String                  @id @default(cuid())
  name                String
  totalWorksPrice     Float                   @default(0)
  totalMaterialsPrice Float                   @default(0)
  totalPrice          Float                   @default(0)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  actId               String
  materials           ActMaterial[]
  roomParameterValues ActRoomParameterValue[]
  act                 Act                     @relation(fields: [actId], references: [id], onDelete: Cascade)
  works               ActWork[]

  @@map("act_rooms")
}

model ActWork {
  id             String    @id @default(cuid())
  quantity       Float
  price          Float
  totalPrice     Float
  description    String?
  roomId         String
  workItemId     String?
  blockTitle     String?
  manualWorkName String?
  manualWorkUnit String?
  room           ActRoom   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  workItem       WorkItem? @relation(fields: [workItemId], references: [id])

  @@map("act_works")
}

model ActMaterial {
  id          String  @id @default(cuid())
  name        String
  unit        String
  quantity    Float
  price       Float
  totalPrice  Float
  description String?
  roomId      String
  room        ActRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("act_materials")
}

model ActCoefficient {
  id          String  @id @default(cuid())
  name        String
  value       Float
  description String?
  actId       String
  act         Act     @relation(fields: [actId], references: [id], onDelete: Cascade)

  @@map("act_coefficients")
}

model ActRoomParameterValue {
  id          String        @id @default(cuid())
  parameterId String
  value       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  actId       String?
  roomId      String?
  act         Act?          @relation(fields: [actId], references: [id], onDelete: Cascade)
  parameter   RoomParameter @relation(fields: [parameterId], references: [id])
  room        ActRoom?      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("act_room_parameter_values")
}

model ActExport {
  id                  String   @id @default(cuid())
  actId               String   @unique
  worksData           String
  materialsData       String
  totalWorksPrice     Float
  totalMaterialsPrice Float
  grandTotal          Float
  coefficientsInfo    String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  act                 Act      @relation(fields: [actId], references: [id], onDelete: Cascade)

  @@map("act_exports")
}
