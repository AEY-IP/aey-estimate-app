const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function restoreFromBackup(backupPath) {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞...');
    console.log(`üìÅ –§–∞–π–ª: ${backupPath}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(backupPath)) {
      throw new Error(`–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${backupPath}`);
    }

    // –ß–∏—Ç–∞–µ–º –±—ç–∫–∞–ø
    const backupData = JSON.parse(fs.readFileSync(backupPath, 'utf8'));
    
    if (!backupData.metadata || !backupData.data) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞');
    }

    console.log(`üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: ${new Date(backupData.metadata.createdAt).toLocaleString('ru-RU')}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${backupData.metadata.description}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:');
    Object.entries(backupData.metadata.tables).forEach(([table, count]) => {
      if (count > 0) {
        console.log(`   - ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
      }
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    console.log('\nüóëÔ∏è  –û—á–∏—â–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
    await prisma.actExport.deleteMany();
    await prisma.actRoomParameterValue.deleteMany();
    await prisma.actCoefficient.deleteMany();
    await prisma.actMaterial.deleteMany();
    await prisma.actWork.deleteMany();
    await prisma.actRoom.deleteMany();
    await prisma.act.deleteMany();

    await prisma.estimateExport.deleteMany();
    await prisma.estimateRoomParameterValue.deleteMany();
    await prisma.estimateCoefficient.deleteMany();
    await prisma.estimateMaterial.deleteMany();
    await prisma.estimateWork.deleteMany();
    await prisma.estimateRoom.deleteMany();
    await prisma.deletedEstimate.deleteMany();
    await prisma.estimate.deleteMany();

    await prisma.scheduleTask.deleteMany();
    await prisma.scheduleProject.deleteMany();
    await prisma.projectScheduleItem.deleteMany();
    await prisma.photo.deleteMany();
    await prisma.photoBlock.deleteMany();
    await prisma.receipt.deleteMany();
    await prisma.receiptBlock.deleteMany();
    await prisma.document.deleteMany();
    await prisma.projectNews.deleteMany();
    await prisma.workItem.deleteMany();
    await prisma.workBlock.deleteMany();
    await prisma.clientUser.deleteMany();
    await prisma.client.deleteMany();
    await prisma.user.deleteMany();
    await prisma.coefficient.deleteMany();
    await prisma.roomParameter.deleteMany();

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('\nüì• –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ...');

    const { data } = backupData;

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    if (data.users?.length > 0) {
      console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data.users.length}`);
      for (const user of data.users) {
        await prisma.user.create({ data: user });
      }
    }

    if (data.coefficients?.length > 0) {
      console.log(`   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: ${data.coefficients.length}`);
      for (const coeff of data.coefficients) {
        await prisma.coefficient.create({ data: coeff });
      }
    }

    if (data.roomParameters?.length > 0) {
      console.log(`   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π: ${data.roomParameters.length}`);
      for (const param of data.roomParameters) {
        await prisma.roomParameter.create({ data: param });
      }
    }

    if (data.workBlocks?.length > 0) {
      console.log(`   - –ë–ª–æ–∫–∏ —Ä–∞–±–æ—Ç: ${data.workBlocks.length}`);
      for (const block of data.workBlocks) {
        await prisma.workBlock.create({ data: block });
      }
    }

    if (data.workItems?.length > 0) {
      console.log(`   - –†–∞–±–æ—Ç—ã: ${data.workItems.length}`);
      for (const item of data.workItems) {
        await prisma.workItem.create({ data: item });
      }
    }

    if (data.clients?.length > 0) {
      console.log(`   - –ö–ª–∏–µ–Ω—Ç—ã: ${data.clients.length}`);
      for (const client of data.clients) {
        await prisma.client.create({ data: client });
      }
    }

    if (data.clientUsers?.length > 0) {
      console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${data.clientUsers.length}`);
      for (const clientUser of data.clientUsers) {
        await prisma.clientUser.create({ data: clientUser });
      }
    }

    if (data.estimates?.length > 0) {
      console.log(`   - –°–º–µ—Ç—ã: ${data.estimates.length}`);
      for (const estimate of data.estimates) {
        await prisma.estimate.create({ data: estimate });
      }
    }

    if (data.estimateRooms?.length > 0) {
      console.log(`   - –ö–æ–º–Ω–∞—Ç—ã —Å–º–µ—Ç: ${data.estimateRooms.length}`);
      for (const room of data.estimateRooms) {
        await prisma.estimateRoom.create({ data: room });
      }
    }

    if (data.estimateWorks?.length > 0) {
      console.log(`   - –†–∞–±–æ—Ç—ã –≤ —Å–º–µ—Ç–∞—Ö: ${data.estimateWorks.length}`);
      for (const work of data.estimateWorks) {
        await prisma.estimateWork.create({ data: work });
      }
    }

    if (data.acts?.length > 0) {
      console.log(`   - –ê–∫—Ç—ã: ${data.acts.length}`);
      for (const act of data.acts) {
        await prisma.act.create({ data: act });
      }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    const additionalTables = [
      'estimateMaterials', 'estimateCoefficients', 'estimateRoomParameterValues',
      'actRooms', 'actWorks', 'actMaterials', 'actCoefficients', 'actRoomParameterValues',
      'documents', 'projectNews', 'photoBlocks', 'photos', 'receiptBlocks', 'receipts',
      'scheduleProjects', 'scheduleTasks', 'projectScheduleItems'
    ];

    for (const tableName of additionalTables) {
      if (data[tableName]?.length > 0) {
        console.log(`   - ${tableName}: ${data[tableName].length}`);
        const modelName = tableName.charAt(0).toLowerCase() + tableName.slice(1);
        for (const item of data[tableName]) {
          try {
            await prisma[modelName].create({ data: item });
          } catch (error) {
            console.log(`     ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ ${tableName}: ${error.message}`);
          }
        }
      }
    }

    console.log('\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const finalStats = await Promise.all([
      prisma.user.count(),
      prisma.client.count(),
      prisma.estimate.count(),
      prisma.act.count()
    ]);

    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${finalStats[0]}`);
    console.log(`   - –ö–ª–∏–µ–Ω—Ç—ã: ${finalStats[1]}`);
    console.log(`   - –°–º–µ—Ç—ã: ${finalStats[2]}`);
    console.log(`   - –ê–∫—Ç—ã: ${finalStats[3]}`);

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
function findLatestBackup() {
  const backupDir = path.join(__dirname, '..', 'backups');
  
  if (!fs.existsSync(backupDir)) {
    throw new Error('–ü–∞–ø–∫–∞ —Å –±—ç–∫–∞–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  const backupFiles = fs.readdirSync(backupDir)
    .filter(file => file.startsWith('backup_') && file.endsWith('.json') && !file.includes('compressed'))
    .sort()
    .reverse();

  if (backupFiles.length === 0) {
    throw new Error('–§–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }

  return path.join(backupDir, backupFiles[0]);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const backupPath = process.argv[2] || findLatestBackup();
  
  restoreFromBackup(backupPath)
    .then(() => {
      console.log('\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { restoreFromBackup, findLatestBackup }; 