const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã –∏–∑ CSV 
function parsePrice(priceStr) {
  if (!priceStr) return 0;
  
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∞–≤—ã—á–∫–∏
  const cleaned = priceStr.toString().trim().replace(/"/g, '');
  
  // –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—É—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á (–Ω–∞–ø—Ä–∏–º–µ—Ä "1,040")
  if (cleaned.includes(',') && !cleaned.includes('.')) {
    // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø–∞—Ä—Å–∏–º –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    return parseInt(cleaned.replace(/,/g, ''), 10);
  }
  
  // –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  if (cleaned.includes('.')) {
    return parseFloat(cleaned);
  }
  
  // –û–±—ã—á–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
  return parseInt(cleaned, 10) || 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–∞
function parseCSV(csvContent) {
  const lines = csvContent.split('\n');
  const data = [];
  
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
    const values = [];
    let current = '';
    let inQuotes = false;
    
    for (let j = 0; j < line.length; j++) {
      const char = line[j];
      if (char === '"') {
        inQuotes = !inQuotes;
      } else if (char === ',' && !inQuotes) {
        values.push(current.trim());
        current = '';
      } else {
        current += char;
      }
    }
    values.push(current.trim());
    
    if (values.length >= 6) {
      const row = {
        ID_AEY: values[0]?.trim(),
        ID_PRIMARY: values[1]?.trim(),
        CLASS: values[2]?.trim(),
        KIND: values[3]?.trim(),
        MES: values[4]?.trim(),
        PRICE: parsePrice(values[5])
      };
      
      data.push(row);
    }
  }
  
  return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ID
function normalizeId(id) {
  if (!id) return '';
  return id.toString().replace(/\.0+$/, '').trim();
}

async function syncAllPrices() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –í–°–ï —Ü–µ–Ω—ã –∏–∑ CSV –≤ JSON...\n');
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    console.log('üìñ –ß–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª...');
    const csvPath = path.join(__dirname, '..', '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    const csvData = parseCSV(csvContent);
    console.log(`‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${csvData.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ CSV\n`);
    
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–∞–º–∏
    console.log('üìñ –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–∞–º–∏...');
    const jsonPath = path.join(__dirname, '..', 'data', 'works.json');
    const jsonContent = fs.readFileSync(jsonPath, 'utf-8');
    const worksData = JSON.parse(jsonContent);
    console.log(`‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${worksData.works.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ JSON\n`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É CSV –¥–∞–Ω–Ω—ã—Ö –ø–æ ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const csvMap = new Map();
    csvData.forEach(row => {
      if (row.ID_AEY) {
        const normalizedId = normalizeId(row.ID_AEY);
        csvMap.set(normalizedId, row);
        csvMap.set(row.ID_AEY.trim(), row);
      }
    });
    
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã...\n');
    
    let syncedCount = 0;
    let unchangedCount = 0;
    const syncs = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ä–∞–±–æ—Ç–∞–º –≤ JSON
    for (const work of worksData.works) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID_AEY –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
      const idMatch = work.description?.match(/ID_AEY:\s*([0-9.]+)/);
      if (!idMatch) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: "${work.name}" - –Ω–µ—Ç ID_AEY`);
        continue;
      }
      
      const idAEY = idMatch[1].trim();
      const normalizedIdAEY = normalizeId(idAEY);
      
      // –ò—â–µ–º –≤ –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏—è—Ö ID
      let csvRow = csvMap.get(idAEY) || csvMap.get(normalizedIdAEY);
      
      if (!csvRow) {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ CSV: "${work.name}" (ID: ${idAEY})`);
        continue;
      }
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã
      const oldPrice = work.basePrice;
      const newPrice = csvRow.PRICE;
      
      if (oldPrice !== newPrice) {
        syncs.push({
          workId: work.id,
          name: work.name,
          oldPrice: oldPrice,
          newPrice: newPrice,
          idAEY: idAEY,
          csvIdAEY: csvRow.ID_AEY
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        work.basePrice = newPrice;
        syncedCount++;
        
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: "${work.name}"`);
        console.log(`   ID: ${idAEY} | ${oldPrice} ‚ÇΩ ‚Üí ${newPrice} ‚ÇΩ\n`);
      } else {
        unchangedCount++;
      }
    }
    
    if (syncedCount === 0) {
      console.log('‚úÖ –í—Å–µ —Ü–µ–Ω—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è... (${syncedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)`);
    
    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    const backupPath = path.join(__dirname, '..', 'data', `works-backup-sync-${Date.now()}.json`);
    fs.writeFileSync(backupPath, jsonContent, 'utf-8');
    console.log(`üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${path.basename(backupPath)}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(jsonPath, JSON.stringify(worksData, null, 2), 'utf-8');
    console.log(`‚úÖ –§–∞–π–ª ${path.basename(jsonPath)} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const reportPath = path.join(__dirname, '..', `price-sync-report-${Date.now()}.json`);
    fs.writeFileSync(reportPath, JSON.stringify({
      timestamp: new Date().toISOString(),
      totalSynced: syncedCount,
      totalUnchanged: unchangedCount,
      syncs: syncs
    }, null, 2), 'utf-8');
    console.log(`üìä –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç: ${path.basename(reportPath)}\n`);
    
    console.log('üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: ${syncedCount}`);
    console.log(`   ‚Ä¢ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${unchangedCount}`);
    console.log(`   ‚Ä¢ –û–±—â–∏–π –ø–µ—Ä–µ–ø–∞–¥ —Ü–µ–Ω: ${syncs.reduce((sum, sync) => sum + Math.abs(sync.newPrice - sync.oldPrice), 0).toLocaleString('ru-RU')} ‚ÇΩ`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  syncAllPrices();
}

module.exports = { syncAllPrices }; 