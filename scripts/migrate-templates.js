const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function migrateTemplates() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–æ–≤ –∫ –±–ª–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    const templates = await prisma.template.findMany({
      where: { isActive: true },
      include: {
        rooms: {
          include: {
            works: {
              include: {
                workItem: {
                  include: {
                    block: true
                  }
                }
              }
            }
          }
        }
      }
    })

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${templates.length} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`)

    for (const template of templates) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω: ${template.name}`)
      
      for (const room of template.rooms) {
        console.log(`  üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–º–µ—â–µ–Ω–∏–µ: ${room.name}`)
        
        if (room.works.length === 0) {
          console.log(`    ‚è≠Ô∏è  –ü–æ–º–µ—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
          continue
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (blockTitle –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è workItem)
        const worksByCategory = {}
        
        for (const work of room.works) {
          let categoryName = '–†–∞–∑–Ω—ã–µ —Ä–∞–±–æ—Ç—ã' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
          
          if (work.blockTitle) {
            categoryName = work.blockTitle
          } else if (work.workItem?.block?.title) {
            categoryName = work.workItem.block.title
          }
          
          if (!worksByCategory[categoryName]) {
            worksByCategory[categoryName] = []
          }
          
          worksByCategory[categoryName].push(work)
        }

        console.log(`    üìä –ù–∞–π–¥–µ–Ω–æ ${Object.keys(worksByCategory).length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç`)

        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ —Ä–∞–±–æ—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for (const [categoryName, works] of Object.entries(worksByCategory)) {
          console.log(`      üî® –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫: ${categoryName} (${works.length} —Ä–∞–±–æ—Ç)`)
          
          // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Ä–∞–±–æ—Ç
          const workBlock = await prisma.templateWorkBlock.create({
            data: {
              title: categoryName,
              description: `–ë–ª–æ–∫ —Ä–∞–±–æ—Ç: ${categoryName}`,
              roomId: room.id,
              totalPrice: works.reduce((sum, work) => sum + work.totalPrice, 0),
              sortOrder: Object.keys(worksByCategory).indexOf(categoryName) + 1
            }
          })

          // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã –∫ –±–ª–æ–∫—É
          for (const work of works) {
            await prisma.templateWork.update({
              where: { id: work.id },
              data: { workBlockId: workBlock.id }
            })
          }

          console.log(`      ‚úÖ –ë–ª–æ–∫ "${categoryName}" —Å–æ–∑–¥–∞–Ω —Å ${works.length} —Ä–∞–±–æ—Ç–∞–º–∏`)
        }
      }
      
      console.log(`  ‚úÖ –®–∞–±–ª–æ–Ω "${template.name}" —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`)
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    console.log('üìù –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–ª–æ–Ω–∞—Ö —Ç–µ–ø–µ—Ä—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–ª–æ–∫–∏')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateTemplates()
  .then(() => {
    console.log('‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', error)
    process.exit(1)
  })
