const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã –∏–∑ CSV (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç " 1,040 ")
function parsePrice(priceStr) {
  if (!priceStr) return 0;
  
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∞–≤—ã—á–∫–∏
  const cleaned = priceStr.toString().trim().replace(/"/g, '');
  
  // –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—É—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á (–Ω–∞–ø—Ä–∏–º–µ—Ä "1,040")
  if (cleaned.includes(',') && !cleaned.includes('.')) {
    // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø–∞—Ä—Å–∏–º –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    return parseInt(cleaned.replace(/,/g, ''), 10);
  }
  
  // –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  if (cleaned.includes('.')) {
    return parseFloat(cleaned);
  }
  
  // –û–±—ã—á–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
  return parseInt(cleaned, 10) || 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–∞
function parseCSV(csvContent) {
  const lines = csvContent.split('\n');
  const header = lines[0].split(',');
  const data = [];
  
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
    const values = [];
    let current = '';
    let inQuotes = false;
    
    for (let j = 0; j < line.length; j++) {
      const char = line[j];
      if (char === '"') {
        inQuotes = !inQuotes;
      } else if (char === ',' && !inQuotes) {
        values.push(current.trim());
        current = '';
      } else {
        current += char;
      }
    }
    values.push(current.trim()); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    if (values.length >= 6) {
      const row = {
        ID_AEY: values[0]?.trim(),
        ID_PRIMARY: values[1]?.trim(),
        CLASS: values[2]?.trim(),
        KIND: values[3]?.trim(),
        MES: values[4]?.trim(),
        PRICE: parsePrice(values[5])
      };
      
      data.push(row);
    }
  }
  
  return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ID (—É–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ü–µ–≤—ã–µ –Ω—É–ª–∏)
function normalizeId(id) {
  if (!id) return '';
  return id.toString().replace(/\.0+$/, '').trim();
}

async function debugSpecificWork() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã...\n');
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvPath = path.join(__dirname, '..', '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    const csvData = parseCSV(csvContent);
    
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–∞–º–∏
    const jsonPath = path.join(__dirname, '..', 'data', 'works.json');
    const jsonContent = fs.readFileSync(jsonPath, 'utf-8');
    const worksData = JSON.parse(jsonContent);
    
    // –ò—â–µ–º —Ä–∞–±–æ—Ç—É —Å –º–µ—Ö–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à—Ç—É–∫–∞—Ç—É—Ä–∫–æ–π —Å ID 2.02
    const targetWork = worksData.works.find(work => 
      work.description && work.description.includes('ID_AEY: 2.02')
    );
    
    if (!targetWork) {
      console.log('‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON');
      return;
    }
    
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –≤ JSON:');
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${targetWork.name}`);
    console.log(`   –¶–µ–Ω–∞: ${targetWork.basePrice}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${targetWork.description}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    const idMatch = targetWork.description?.match(/ID_AEY:\s*([0-9.]+)/);
    if (!idMatch) {
      console.log('‚ùå ID_AEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏');
      return;
    }
    
    const jsonId = idMatch[1].trim();
    const normalizedJsonId = normalizeId(jsonId);
    
    console.log(`   JSON ID: ${jsonId}`);
    console.log(`   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID: ${normalizedJsonId}\n`);
    
    // –ò—â–µ–º –≤ CSV
    console.log('üîç –ü–æ–∏—Å–∫ –≤ CSV...');
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É CSV –¥–∞–Ω–Ω—ã—Ö
    const csvMap = new Map();
    csvData.forEach(row => {
      if (row.ID_AEY) {
        const normalizedId = normalizeId(row.ID_AEY);
        csvMap.set(normalizedId, row);
        csvMap.set(row.ID_AEY.trim(), row);
      }
    });
    
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ CSV –∫–∞—Ä—Ç–µ: ${csvMap.size}`);
    
    // –ò—â–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    let csvRow = csvMap.get(jsonId);
    console.log(`   –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID "${jsonId}": ${csvRow ? '–ù–ê–ô–î–ï–ù–û' : '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
    
    if (!csvRow) {
      csvRow = csvMap.get(normalizedJsonId);
      console.log(`   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É ID "${normalizedJsonId}": ${csvRow ? '–ù–ê–ô–î–ï–ù–û' : '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
    }
    
    if (csvRow) {
      console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ –≤ CSV:');
      console.log(`   CSV ID: ${csvRow.ID_AEY}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${csvRow.KIND}`);
      console.log(`   –¶–µ–Ω–∞: ${csvRow.PRICE}`);
      console.log(`   –ï–¥–∏–Ω–∏—Ü—ã: ${csvRow.MES}`);
      
      console.log('\nüîß –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:');
      console.log(`   JSON —Ü–µ–Ω–∞: ${targetWork.basePrice}`);
      console.log(`   CSV —Ü–µ–Ω–∞: ${csvRow.PRICE}`);
      console.log(`   –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${targetWork.basePrice === 1 && csvRow.PRICE > 100 ? '–î–ê' : '–ù–ï–¢'}`);
    } else {
      console.log('\n‚ùå –ó–∞–ø–∏—Å—å –≤ CSV –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü–æ–∫–∞–∂–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏
      console.log('\nüîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ CSV:');
      const similarRecords = csvData.filter(row => 
        row.KIND && row.KIND.toLowerCase().includes('—à—Ç—É–∫–∞—Ç—É—Ä')
      ).slice(0, 5);
      
      similarRecords.forEach(record => {
        console.log(`   ID: ${record.ID_AEY} - ${record.KIND} - ${record.PRICE} ‚ÇΩ`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
if (require.main === module) {
  debugSpecificWork();
}

module.exports = { debugSpecificWork }; 