const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

const prisma = new PrismaClient()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã
function parsePrice(priceString) {
  if (!priceString) return 0
  
  const cleaned = priceString.trim().toLowerCase()
  
  // –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∫–∞–∫ "–≤—Ä—É—á–Ω—É—é" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (cleaned.includes('–≤—Ä—É—á–Ω—É—é') || cleaned.includes('–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è') || cleaned.includes('–ø–æ –¥–æ–≥–æ–≤–æ—Ä—É')) {
    return 0
  }
  
  // –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const numericPrice = parseFloat(cleaned.replace(/[^\d.,]/g, '').replace(',', '.'))
  return isNaN(numericPrice) ? 0 : numericPrice
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV
function parseCSV(csvContent) {
  const lines = csvContent.split('\n')
  const headers = lines[0].split(',')
  const data = []
  
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim()
    if (!line) continue
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
    const values = []
    let current = ''
    let inQuotes = false
    
    for (let j = 0; j < line.length; j++) {
      const char = line[j]
      if (char === '"') {
        inQuotes = !inQuotes
      } else if (char === ',' && !inQuotes) {
        values.push(current.trim())
        current = ''
      } else {
        current += char
      }
    }
    values.push(current.trim())
    
    if (values.length >= 6) {
      const row = {
        ID_AEY: values[0]?.trim(),
        ID_PRIMARY: values[1]?.trim(), 
        CLASS: values[2]?.trim(),
        KIND: values[3]?.trim(),
        MES: values[4]?.trim(),
        PRICE: parsePrice(values[5])
      }
      
      if (row.KIND && row.MES) {
        data.push(row)
      }
    }
  }
  
  return data
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ —Ä–∞–±–æ—Ç
async function createWorkBlocks(categories) {
  const blocks = new Map()
  
  for (const category of categories) {
    let existingBlock = await prisma.workBlock.findFirst({
      where: { title: category }
    })
    
    if (!existingBlock) {
      existingBlock = await prisma.workBlock.create({
        data: {
          title: category,
          description: `–ë–ª–æ–∫ —Ä–∞–±–æ—Ç: ${category}`,
          isActive: true
        }
      })
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫: ${category}`)
    } else {
      console.log(`‚ÑπÔ∏è  –ë–ª–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${category}`)
    }
    
    blocks.set(category, existingBlock.id)
  }
  
  return blocks
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importWorksFromCSV() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç –∏–∑ CSV...\n')
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvPath = path.join(__dirname, '..', '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç.csv')
    const csvContent = fs.readFileSync(csvPath, 'utf-8')
    const csvData = parseCSV(csvContent)
    
    console.log(`üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${csvData.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ CSV\n`)
    
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = [...new Set(csvData.map(row => row.CLASS))]
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`)
    
    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ —Ä–∞–±–æ—Ç
    console.log('\nüèóÔ∏è  –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ —Ä–∞–±–æ—Ç...')
    const blockMap = await createWorkBlocks(categories)
    
    console.log('\nüì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã...')
    
    let imported = 0
    let skipped = 0
    
    for (const row of csvData) {
      try {
        const blockId = blockMap.get(row.CLASS)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–∞–±–æ—Ç–∞
        const existingWork = await prisma.workItem.findFirst({
          where: {
            name: row.KIND,
            unit: row.MES
          }
        })
        
        if (existingWork) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
          if (existingWork.price !== row.PRICE) {
            await prisma.workItem.update({
              where: { id: existingWork.id },
              data: { 
                price: row.PRICE,
                updatedAt: new Date()
              }
            })
            const priceText = row.PRICE === 0 ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ 0 (–≤—Ä—É—á–Ω—É—é)' : `–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${row.PRICE}`
            console.log(`üîÑ –¶–µ–Ω–∞ ${priceText}: ${row.KIND}`)
          }
          skipped++
          continue
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É
        await prisma.workItem.create({
          data: {
            name: row.KIND,
            unit: row.MES,
            price: row.PRICE,
            description: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ CSV. ID_AEY: ${row.ID_AEY}, ID_PRIMARY: ${row.ID_PRIMARY}`,
            isActive: true,
            blockId: blockId,
            createdAt: new Date(),
            updatedAt: new Date()
          }
        })
        
        imported++
        
        if (imported % 100 === 0) {
          console.log(`   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported} —Ä–∞–±–æ—Ç...`)
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã "${row.KIND}":`, error.message)
        skipped++
      }
    }
    
    console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')
    console.log(`   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported} —Ä–∞–±–æ—Ç`)
    console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped} —Ä–∞–±–æ—Ç`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
importWorksFromCSV() 