const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

async function restoreRoomParameters() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const currentCount = await prisma.roomParameter.count()
    console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${currentCount}`)
    
    if (currentCount > 0) {
      console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')
      return
    }
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const parametersPath = path.join(__dirname, '../data/room-parameters.json')
    const parametersData = JSON.parse(fs.readFileSync(parametersPath, 'utf8'))
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${parametersData.parameters.length} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`)
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    let created = 0
    
    for (const param of parametersData.parameters) {
      try {
        await prisma.roomParameter.create({
          data: {
            id: param.id,
            name: param.name,
            unit: param.unit,
            description: param.description || null,
            isActive: param.isActive !== false,
            createdAt: param.createdAt ? new Date(param.createdAt) : new Date(),
            updatedAt: param.updatedAt ? new Date(param.updatedAt) : new Date()
          }
        })
        created++
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${param.name}: ${error.message}`)
      }
    }
    
    console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ ${created} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    const samples = await prisma.roomParameter.findMany({
      take: 5,
      select: { name: true, unit: true, id: true }
    })
    
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:')
    samples.forEach(param => {
      console.log(`  ‚Ä¢ ${param.name} (${param.unit}) - ID: ${param.id}`)
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

restoreRoomParameters()
