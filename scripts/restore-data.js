const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

const prisma = new PrismaClient()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç—ã
function safeDate(dateString) {
  if (!dateString) return new Date()
  const date = new Date(dateString)
  return isNaN(date.getTime()) ? new Date() : date
}

async function restoreData() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–æ–≤...')

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
    const dataDir = path.join(__dirname, '..', 'data')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const files = fs.readdirSync(dataDir)
    console.log('üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:', files.filter(f => f.endsWith('.json')))

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Ñ–∞–π–ª—ã
    const clients = JSON.parse(fs.readFileSync(path.join(dataDir, 'clients.json'), 'utf8'))
    const estimates = JSON.parse(fs.readFileSync(path.join(dataDir, 'estimates.json'), 'utf8')) // –°–ê–ú–´–ô –°–í–ï–ñ–ò–ô –æ—Ç 20 –∏—é–Ω—è!
    const users = JSON.parse(fs.readFileSync(path.join(dataDir, 'users.json'), 'utf8'))
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    let coefficients = []
    let roomParameters = []
    
    try {
      coefficients = JSON.parse(fs.readFileSync(path.join(dataDir, 'coefficients.json'), 'utf8'))
    } catch (e) {
      console.log('‚ö†Ô∏è  –§–∞–π–ª coefficients.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω')
    }
    
    try {
      roomParameters = JSON.parse(fs.readFileSync(path.join(dataDir, 'room-parameters.json'), 'utf8'))
    } catch (e) {
      console.log('‚ö†Ô∏è  –§–∞–π–ª room-parameters.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω')
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:`)
    console.log(`   - –ö–ª–∏–µ–Ω—Ç—ã: ${clients.length}`)
    console.log(`   - –°–º–µ—Ç—ã: ${estimates.length} (–°–í–ï–ñ–ò–ï –æ—Ç 20 –∏—é–Ω—è!)`)
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`)
    console.log(`   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: ${coefficients.length}`)
    console.log(`   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π: ${roomParameters.length}`)

    // 1. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    for (const user of users) {
      try {
        await prisma.user.upsert({
          where: { id: user.id },
          update: {
            name: user.name,
            email: user.email || `${user.username}@example.com`, // –°–æ–∑–¥–∞–µ–º email –∏–∑ username
            role: user.role,
            passwordHash: user.passwordHash,
            updatedAt: safeDate(user.updatedAt)
          },
          create: {
            id: user.id,
            name: user.name,
            email: user.email || `${user.username}@example.com`, // –°–æ–∑–¥–∞–µ–º email –∏–∑ username
            role: user.role,
            passwordHash: user.passwordHash,
            createdAt: safeDate(user.createdAt),
            updatedAt: safeDate(user.updatedAt)
          }
        })
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email || user.username})`)
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.name}: ${error.message}`)
      }
    }

    // 2. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    console.log('\nüë§ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–ª–∏–µ–Ω—Ç–æ–≤...')
    for (const client of clients) {
      try {
        await prisma.client.upsert({
          where: { id: client.id },
          update: {
            name: client.name,
            email: client.email,
            phone: client.phone,
            address: client.address,
            notes: client.notes || '',
            managerId: client.managerId,
            updatedAt: safeDate(client.updatedAt)
          },
          create: {
            id: client.id,
            name: client.name,
            email: client.email,
            phone: client.phone,
            address: client.address,
            notes: client.notes || '',
            managerId: client.managerId,
            createdBy: client.createdBy || 'admin_1', // –ò—Å–ø–æ–ª—å–∑—É–µ–º admin_1 –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            createdAt: safeDate(client.createdAt),
            updatedAt: safeDate(client.updatedAt)
          }
        })
        console.log(`   ‚úÖ –ö–ª–∏–µ–Ω—Ç: ${client.name} (${client.email || '–±–µ–∑ email'})`)
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º ${client.name}: ${error.message}`)
      }
    }

    // 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã
    console.log('\nüî® –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—ã...')
    
    try {
      const worksData = JSON.parse(fs.readFileSync(path.join(dataDir, 'works.json'), 'utf8'))
      
      if (worksData.works && Array.isArray(worksData.works)) {
        console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ ${worksData.works.length} —Ä–∞–±–æ—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è`)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
        const currentWorksCount = await prisma.work.count()
        console.log(`   üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç –≤ –ë–î: ${currentWorksCount}`)
        
        if (currentWorksCount === 0) {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ—Ä—Ü–∏—è–º–∏
          const batchSize = 100
          let restored = 0
          
          for (let i = 0; i < worksData.works.length; i += batchSize) {
            const batch = worksData.works.slice(i, i + batchSize)
            
            const worksToCreate = batch.map(work => ({
              id: work.id,
              name: work.name,
              unit: work.unit,
              basePrice: work.basePrice,
              category: work.category,
              description: work.description || null,
              parameterId: work.parameterId || null,
              isActive: work.isActive !== false,
              createdAt: safeDate(work.createdAt),
              updatedAt: safeDate(work.updatedAt)
            }))
            
            await prisma.work.createMany({
              data: worksToCreate,
              skipDuplicates: true
            })
            
            restored += worksToCreate.length
            console.log(`   üìù –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restored}/${worksData.works.length} —Ä–∞–±–æ—Ç...`)
          }
          
          console.log(`   ‚úÖ –í—Å–µ —Ä–∞–±–æ—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!`)
        } else {
          console.log(`   ‚ö†Ô∏è  –†–∞–±–æ—Ç—ã —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ`)
        }
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç: ${error.message}`)
    }

    // 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    if (coefficients.length > 0) {
      console.log('\nüìä –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã...')
      for (const coeff of coefficients) {
        try {
          await prisma.coefficient.upsert({
            where: { id: coeff.id },
            update: {
              name: coeff.name,
              value: coeff.value,
              type: coeff.type,
              updatedAt: safeDate(coeff.updatedAt)
            },
            create: {
              id: coeff.id,
              name: coeff.name,
              value: coeff.value,
              type: coeff.type,
              createdAt: safeDate(coeff.createdAt),
              updatedAt: safeDate(coeff.updatedAt)
            }
          })
          console.log(`   ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${coeff.name}`)
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º ${coeff.name}: ${error.message}`)
        }
      }
    }

    // 5. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π
    if (roomParameters.length > 0) {
      console.log('\nüè† –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π...')
      for (const param of roomParameters) {
        try {
          await prisma.roomParameter.upsert({
            where: { id: param.id },
            update: {
              name: param.name,
              unit: param.unit,
              updatedAt: safeDate(param.updatedAt)
            },
            create: {
              id: param.id,
              name: param.name,
              unit: param.unit,
              createdAt: safeDate(param.createdAt),
              updatedAt: safeDate(param.updatedAt)
            }
          })
          console.log(`   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä: ${param.name}`)
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${param.name}: ${error.message}`)
        }
      }
    }

    // 6. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–º–µ—Ç—ã (–°–ê–ú–û–ï –í–ê–ñ–ù–û–ï - –°–í–ï–ñ–ò–ï –î–ê–ù–ù–´–ï!)
    console.log('\nüìã –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–º–µ—Ç—ã (–°–í–ï–ñ–ò–ï –î–ê–ù–ù–´–ï –û–¢ 20 –ò–Æ–ù–Ø)...')
    for (const estimate of estimates) {
      try {
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–º–µ—Ç—É
        const createdEstimate = await prisma.estimate.upsert({
          where: { id: estimate.id },
          update: {
            title: estimate.title,
            type: estimate.type,
            category: estimate.category,
            clientId: estimate.clientId,
            totalWorksPrice: estimate.totalWorksPrice || 0,
            totalMaterialsPrice: estimate.totalMaterialsPrice || 0,
            totalPrice: estimate.totalPrice || 0,
            notes: estimate.notes || '',
            createdBy: estimate.createdBy,
            updatedAt: safeDate(estimate.updatedAt)
          },
          create: {
            id: estimate.id,
            title: estimate.title,
            type: estimate.type,
            category: estimate.category,
            clientId: estimate.clientId,
            totalWorksPrice: estimate.totalWorksPrice || 0,
            totalMaterialsPrice: estimate.totalMaterialsPrice || 0,
            totalPrice: estimate.totalPrice || 0,
            notes: estimate.notes || '',
            createdBy: estimate.createdBy,
            createdAt: safeDate(estimate.createdAt),
            updatedAt: safeDate(estimate.updatedAt)
          }
        })

        console.log(`   ‚úÖ –°–º–µ—Ç–∞: ${estimate.title} (ID: ${estimate.id})`)

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Å–º–µ—Ç —Ç–∏–ø–∞ "rooms"
        if (estimate.type === 'rooms' && estimate.rooms) {
          for (const room of estimate.rooms) {
            try {
              await prisma.estimateRoom.upsert({
                where: { id: room.id },
                update: {
                  name: room.name,
                  estimateId: estimate.id,
                  totalWorksPrice: room.totalWorksPrice || 0,
                  totalMaterialsPrice: room.totalMaterialsPrice || 0,
                  totalPrice: room.totalPrice || 0,
                  updatedAt: safeDate(room.updatedAt)
                },
                create: {
                  id: room.id,
                  name: room.name,
                  estimateId: estimate.id,
                  totalWorksPrice: room.totalWorksPrice || 0,
                  totalMaterialsPrice: room.totalMaterialsPrice || 0,
                  totalPrice: room.totalPrice || 0,
                  createdAt: safeDate(room.createdAt),
                  updatedAt: safeDate(room.updatedAt)
                }
              })

              // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã –∫–æ–º–Ω–∞—Ç—ã
              if (room.worksBlock && room.worksBlock.blocks) {
                for (const block of room.worksBlock.blocks) {
                  if (block.items) {
                    for (const item of block.items) {
                      try {
                        await prisma.estimateWork.create({
                          data: {
                            id: item.id,
                            estimateId: estimate.id,
                            roomId: room.id,
                            workId: item.workId,
                            name: item.name,
                            unit: item.unit,
                            quantity: item.quantity,
                            unitPrice: item.unitPrice,
                            totalPrice: item.totalPrice,
                            blockTitle: block.title,
                            createdAt: new Date(),
                            updatedAt: new Date()
                          }
                        })
                      } catch (workError) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–∞–±–æ—Ç
                        if (!workError.message.includes('Unique constraint')) {
                          console.log(`     ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å —Ä–∞–±–æ—Ç–æ–π ${item.name}: ${workError.message}`)
                        }
                      }
                    }
                  }
                }
              }

              console.log(`     ‚úÖ –ö–æ–º–Ω–∞—Ç–∞: ${room.name}`)
            } catch (roomError) {
              console.log(`     ‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–º–Ω–∞—Ç–æ–π ${room.name}: ${roomError.message}`)
            }
          }
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã –¥–ª—è —Å–º–µ—Ç —Ç–∏–ø–∞ "apartment"
        if (estimate.type === 'apartment' && estimate.worksBlock && estimate.worksBlock.blocks) {
          for (const block of estimate.worksBlock.blocks) {
            if (block.items) {
              for (const item of block.items) {
                try {
                  await prisma.estimateWork.create({
                    data: {
                      id: item.id,
                      estimateId: estimate.id,
                      workId: item.workId,
                      name: item.name,
                      unit: item.unit,
                      quantity: item.quantity,
                      unitPrice: item.unitPrice,
                      totalPrice: item.totalPrice,
                      blockTitle: block.title,
                      createdAt: new Date(),
                      updatedAt: new Date()
                    }
                  })
                } catch (workError) {
                  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–∞–±–æ—Ç
                  if (!workError.message.includes('Unique constraint')) {
                    console.log(`     ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å —Ä–∞–±–æ—Ç–æ–π ${item.name}: ${workError.message}`)
                  }
                }
              }
            }
          }
        }

      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ —Å–º–µ—Ç–æ–π ${estimate.title}: ${error.message}`)
      }
    }

    console.log('\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    
    try {
      const finalStats = await Promise.all([
        prisma.user.count(),
        prisma.client.count(),
        prisma.estimate.count(),
        prisma.estimateRoom.count(),
        prisma.estimateWork.count(),
        prisma.work.count(),
        prisma.coefficient.count(),
        prisma.roomParameter.count()
      ])

      console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${finalStats[0]}`)
      console.log(`   - –ö–ª–∏–µ–Ω—Ç—ã: ${finalStats[1]}`)
      console.log(`   - –°–º–µ—Ç—ã: ${finalStats[2]}`)
      console.log(`   - –ö–æ–º–Ω–∞—Ç—ã —Å–º–µ—Ç: ${finalStats[3]}`)
      console.log(`   - –†–∞–±–æ—Ç—ã –≤ —Å–º–µ—Ç–∞—Ö: ${finalStats[4]}`)
      console.log(`   - –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç: ${finalStats[5]}`)
      console.log(`   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: ${finalStats[6]}`)
      console.log(`   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π: ${finalStats[7]}`)
    } catch (statsError) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsError.message)
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
  } finally {
    await prisma.$disconnect()
  }
}

restoreData() 