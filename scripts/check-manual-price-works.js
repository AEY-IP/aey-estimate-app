const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

const prisma = new PrismaClient()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV (—Ç–∞ –∂–µ —á—Ç–æ –≤ –∏–º–ø–æ—Ä—Ç–µ)
function parseCSV(csvContent) {
  const lines = csvContent.split('\n')
  const data = []
  
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim()
    if (!line) continue
    
    const values = []
    let current = ''
    let inQuotes = false
    
    for (let j = 0; j < line.length; j++) {
      const char = line[j]
      if (char === '"') {
        inQuotes = !inQuotes
      } else if (char === ',' && !inQuotes) {
        values.push(current.trim())
        current = ''
      } else {
        current += char
      }
    }
    values.push(current.trim())
    
    if (values.length >= 6) {
      const row = {
        ID_AEY: values[0]?.trim(),
        ID_PRIMARY: values[1]?.trim(), 
        CLASS: values[2]?.trim(),
        KIND: values[3]?.trim(),
        MES: values[4]?.trim(),
        PRICE_RAW: values[5]?.trim()
      }
      
      if (row.KIND && row.MES) {
        data.push(row)
      }
    }
  }
  
  return data
}

async function checkManualPriceWorks() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–æ–π "–≤—Ä—É—á–Ω—É—é"...\n')
    
    // –ß–∏—Ç–∞–µ–º CSV
    const csvPath = path.join(__dirname, '..', '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç.csv')
    const csvContent = fs.readFileSync(csvPath, 'utf-8')
    const csvData = parseCSV(csvContent)
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–æ–π "–≤—Ä—É—á–Ω—É—é"
    const manualPriceWorks = csvData.filter(work => 
      work.PRICE_RAW.toLowerCase().includes('–≤—Ä—É—á–Ω—É—é')
    )
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –≤ CSV —Ä–∞–±–æ—Ç —Å —Ü–µ–Ω–æ–π "–≤—Ä—É—á–Ω—É—é": ${manualPriceWorks.length}`)
    
    console.log('\nüìÑ –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç —Å —Ü–µ–Ω–æ–π "–≤—Ä—É—á–Ω—É—é":')
    manualPriceWorks.forEach((work, index) => {
      console.log(`${index + 1}. ${work.KIND} (${work.MES}) - ID: ${work.ID_AEY}`)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    
    let foundInDB = 0
    let notFoundInDB = 0
    
    for (const work of manualPriceWorks) {
      const dbWork = await prisma.workItem.findFirst({
        where: {
          name: work.KIND,
          unit: work.MES
        }
      })
      
      if (dbWork) {
        foundInDB++
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${work.KIND} (—Ü–µ–Ω–∞: ${dbWork.price})`)
      } else {
        notFoundInDB++
        console.log(`‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${work.KIND}`)
      }
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
    console.log(`   –í—Å–µ–≥–æ —Ä–∞–±–æ—Ç —Å —Ü–µ–Ω–æ–π "–≤—Ä—É—á–Ω—É—é": ${manualPriceWorks.length}`)
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${foundInDB}`)
    console.log(`   –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${notFoundInDB}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–æ–π = 0 –≤ –±–∞–∑–µ
    const zeroPriceWorks = await prisma.workItem.findMany({
      where: { price: 0 },
      select: { name: true, unit: true, price: true }
    })
    
    console.log(`\nüí∞ –†–∞–±–æ—Ç —Å —Ü–µ–Ω–æ–π = 0 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${zeroPriceWorks.length}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkManualPriceWorks() 