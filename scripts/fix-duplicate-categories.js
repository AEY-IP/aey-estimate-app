const { PrismaClient } = require('@prisma/client')

async function fixDuplicateCategories() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—Ç—ã
    const works = await prisma.work.findMany({
      select: {
        id: true,
        category: true
      }
    })
    
    console.log(`üìã –í—Å–µ–≥–æ —Ä–∞–±–æ—Ç: ${works.length}`)
    
    let fixed = 0
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
    for (const work of works) {
      const trimmed = work.category.trim()
      if (work.category !== trimmed) {
        await prisma.work.update({
          where: { id: work.id },
          data: { category: trimmed }
        })
        fixed++
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—Ç: ${fixed}`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = await prisma.work.findMany({
      select: { category: true },
      distinct: ['category']
    })
    
    console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
    const demontageCategories = await prisma.work.findMany({
      where: {
        category: {
          contains: '–î–µ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ'
        }
      },
      select: { category: true },
      distinct: ['category']
    })
    
    console.log('\nüìÇ –î–µ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
    for (const cat of demontageCategories) {
      const count = await prisma.work.count({
        where: { category: cat.category }
      })
      console.log(`  ‚Ä¢ ${cat.category} - ${count} —Ä–∞–±–æ—Ç`)
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixDuplicateCategories()
