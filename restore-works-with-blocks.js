const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

async function restoreWorksWithBlocks() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∞–º–∏...');
    
    const worksData = JSON.parse(fs.readFileSync('data/works.json', 'utf8'));
    console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–±–æ—Ç—ã:', worksData.works.length);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = [...new Set(worksData.works.map(work => work.category))];
    console.log('üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories.length);
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await prisma.workItem.deleteMany({});
    await prisma.workBlock.deleteMany({});
    console.log('üóëÔ∏è –¢–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const blockMap = new Map();
    
    for (const category of categories) {
      const block = await prisma.workBlock.create({
        data: {
          title: category,
          description: `–ë–ª–æ–∫ —Ä–∞–±–æ—Ç: ${category}`,
          isActive: true
        }
      });
      blockMap.set(category, block.id);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫: ${category}`);
    }
    
    console.log('üì¶ –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:', blockMap.size);
    
    // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –±–ª–æ–∫–∞–º
    const batchSize = 100;
    let restored = 0;
    
    for (let i = 0; i < worksData.works.length; i += batchSize) {
      const batch = worksData.works.slice(i, i + batchSize);
      
      const dataToInsert = batch.map(work => ({
        id: work.id,
        name: work.name,
        unit: work.unit,
        price: work.basePrice,
        description: work.description || '',
        parameterId: work.parameterId || null,
        blockId: blockMap.get(work.category), // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –±–ª–æ–∫—É
        isActive: work.isActive !== false,
        createdAt: new Date(work.createdAt),
        updatedAt: new Date(work.updatedAt)
      }));
      
      await prisma.workItem.createMany({
        data: dataToInsert
      });
      
      restored += batch.length;
      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restored}/${worksData.works.length} —Ä–∞–±–æ—Ç`);
    }
    
    const workCount = await prisma.workItem.count();
    const blockCount = await prisma.workBlock.count();
    
    console.log('üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üìä –ë–ª–æ–∫–æ–≤:', blockCount);
    console.log('üìä –†–∞–±–æ—Ç:', workCount);
    
    // –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã
    const sample = await prisma.workItem.findFirst({
      include: { block: true },
      select: { 
        id: true, 
        name: true, 
        unit: true, 
        price: true,
        block: { select: { title: true } }
      }
    });
    console.log('üìã –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:', JSON.stringify(sample, null, 2));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

restoreWorksWithBlocks();
