const { PrismaClient } = require('@prisma/client')

async function testEstimateUpdate() {
  const prisma = new PrismaClient()
  
  try {
    console.log('ÔøΩÔøΩ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π...')
    
    // –ù–∞–π–¥–µ–º —Å–º–µ—Ç—É —Å –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏
    const estimate = await prisma.estimate.findFirst({
      where: { type: 'rooms' },
      include: {
        rooms: {
          include: {
            works: {
              include: {
                workItem: true
              }
            },
            materials: true
          }
        }
      }
    })
    
    if (!estimate) {
      console.log('‚ùå –ù–µ—Ç —Å–º–µ—Ç —Ç–∏–ø–∞ "rooms" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }
    
    console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–º–µ—Ç—É:', estimate.title)
    console.log('üìä –ü–æ–º–µ—â–µ–Ω–∏–π:', estimate.rooms.length)
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –ª–æ–≥–∏–∫—É
    const updateData = {
      title: estimate.title,
      type: estimate.type,
      totalWorksPrice: estimate.totalWorksPrice,
      totalMaterialsPrice: estimate.totalMaterialsPrice,
      totalPrice: estimate.totalPrice,
      updatedAt: new Date()
    }
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è...')
    const updated = await prisma.estimate.update({
      where: { id: estimate.id },
      data: updateData
    })
    
    console.log('‚úÖ –ë–∞–∑–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏–π
    if (estimate.rooms.length > 0) {
      const room = estimate.rooms[0]
      console.log('üè† –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–º–µ—â–µ–Ω–∏–µ:', room.name)
      
      const roomUpdateData = {
        name: room.name,
        totalWorksPrice: room.totalWorksPrice || 0,
        totalMaterialsPrice: room.totalMaterialsPrice || 0,
        totalPrice: room.totalPrice || 0
      }
      
      const updatedRoom = await prisma.estimateRoom.update({
        where: { id: room.id },
        data: roomUpdateData
      })
      
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ')
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã
      if (room.works.length > 0) {
        console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç...')
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–±–æ—Ç—ã
        await prisma.estimateWork.deleteMany({
          where: { roomId: room.id }
        })
        console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–µ —Ä–∞–±–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã')
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
        const newWorks = room.works.map(work => ({
          roomId: room.id,
          quantity: work.quantity || 0,
          price: work.price || 0,
          totalPrice: work.totalPrice || 0,
          description: work.description || '',
          workItemId: work.workItemId,
          blockTitle: work.blockTitle || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        })).filter(work => work.workItemId)
        
        if (newWorks.length > 0) {
          await prisma.estimateWork.createMany({
            data: newWorks
          })
          console.log('‚úÖ –†–∞–±–æ—Ç—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', newWorks.length)
        }
      }
    }
    
    console.log('üéâ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message)
    console.error('–î–µ—Ç–∞–ª–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testEstimateUpdate()
